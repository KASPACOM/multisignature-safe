{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"multiSend","inputs":[{"name":"transactions","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x60a0604052348015600f57600080fd5b503060805260805161025a61002e60003960006042015261025a6000f3fe60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b61003661003136600461016b565b610038565b005b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036100cd5760405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b606482015260840160405180910390fd5b805160205b81811015610150578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610117576001811461012757610132565b6000808585888a5af19150610132565b6000808585895af491505b508061013d57600080fd5b50508060550185019450505050506100d2565b505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561017d57600080fd5b813567ffffffffffffffff81111561019457600080fd5b8201601f810184136101a557600080fd5b803567ffffffffffffffff8111156101bf576101bf610155565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156101ee576101ee610155565b60405281815282820160200186101561020657600080fd5b8160208401602083013760009181016020019190915294935050505056fea2646970667358221220302c534db3bbaec8d1fbf50090db5439a2739dbe8caf41ed00fbceba95d7541c64736f6c634300081a0033","sourceMap":"338:3110:44:-:0;;;414:65;;;;;;;;;-1:-1:-1;467:4:44;438:34;;338:3110;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x60806040526004361061001e5760003560e01c80638d80ff0a14610023575b600080fd5b61003661003136600461016b565b610038565b005b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036100cd5760405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b606482015260840160405180910390fd5b805160205b81811015610150578083015160f81c6001820184015160601c601583018501516035840186015160558501870160008560008114610117576001811461012757610132565b6000808585888a5af19150610132565b6000808585895af491505b508061013d57600080fd5b50508060550185019450505050506100d2565b505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561017d57600080fd5b813567ffffffffffffffff81111561019457600080fd5b8201601f810184136101a557600080fd5b803567ffffffffffffffff8111156101bf576101bf610155565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156101ee576101ee610155565b60405281815282820160200186101561020657600080fd5b8160208401602083013760009181016020019190915294935050505056fea2646970667358221220302c534db3bbaec8d1fbf50090db5439a2739dbe8caf41ed00fbceba95d7541c64736f6c634300081a0033","sourceMap":"338:3110:44:-:0;;;;;;;;;;;;;;;;;;;;;1286:2160;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1382:18:44;1365:35;1373:4;1365:35;1357:96;;;;-1:-1:-1;;;1357:96:44;;1297:2:56;1357:96:44;;;1279:21:56;1336:2;1316:18;;;1309:30;1375:34;1355:18;;;1348:62;-1:-1:-1;;;1426:18:56;;;1419:46;1482:19;;1357:96:44;;;;;;;;1562:12;1556:19;1597:4;1614:1816;1697:6;1694:1;1691:13;1614:1816;;;2088:1;2074:12;2070:20;2064:27;2058:4;2054:38;2362:4;2359:1;2355:12;2341;2337:31;2331:38;2325:4;2321:49;2524:4;2521:1;2517:12;2503;2499:31;2493:38;2707:4;2704:1;2700:12;2686;2682:31;2676:38;2901:4;2898:1;2894:12;2880;2876:31;2939:1;2964:9;2995:1;2990:104;;;;3116:1;3111:105;;;;2957:259;;2990:104;3074:1;3071;3059:10;3053:4;3046:5;3042:2;3035:5;3030:46;3019:57;;2990:104;;3111:105;3196:1;3193;3181:10;3175:4;3171:2;3164:5;3151:47;3140:58;;2957:259;-1:-1:-1;3239:7:44;3233:70;;3283:1;3280;3273:12;3233:70;;;3404:10;3398:4;3394:21;3391:1;3387:29;3382:34;;;;;;1614:1816;;;1618:72;;1286:2160;:::o;14:127:56:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:944;214:6;267:2;255:9;246:7;242:23;238:32;235:52;;;283:1;280;273:12;235:52;323:9;310:23;356:18;348:6;345:30;342:50;;;388:1;385;378:12;342:50;411:22;;464:4;456:13;;452:27;-1:-1:-1;442:55:56;;493:1;490;483:12;442:55;533:2;520:16;559:18;551:6;548:30;545:56;;;581:18;;:::i;:::-;630:2;624:9;722:2;684:17;;-1:-1:-1;;680:31:56;;;713:2;676:40;672:54;660:67;;757:18;742:34;;778:22;;;739:62;736:88;;;804:18;;:::i;:::-;840:2;833:22;864;;;905:15;;;922:2;901:24;898:37;-1:-1:-1;895:57:56;;;948:1;945;938:12;895:57;1004:6;999:2;995;991:11;986:2;978:6;974:15;961:50;1057:1;1031:19;;;1052:2;1027:28;1020:39;;;;1035:6;146:944;-1:-1:-1;;;;146:944:56:o","linkReferences":{},"immutableReferences":{"42843":[{"start":66,"length":32}]}},"methodIdentifiers":{"multiSend(bytes)":"8d80ff0a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nick Dodson - <nick.dodson@consensys.net>Gon\\u00e7alo S\\u00e1 - <goncalo.sa@consensys.net>Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}}},\"title\":\"Multi Send - Allows to batch multiple transactions into one.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multiSend(bytes)\":{\"notice\":\"This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/safe-smart-account/contracts/libraries/MultiSend.sol\":\"MultiSend\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\":safe-smart-account/=lib/safe-smart-account/contracts/\"]},\"sources\":{\"lib/safe-smart-account/contracts/libraries/MultiSend.sol\":{\"keccak256\":\"0x030bc8f4195cc8cba16efacba3da6870188af2d4b44d739de5d25e01e1473f9f\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://e5a332517a4c7f249ba69f98c093cb61ffe9e1c059699c327c6e2548ac9c7bd3\",\"dweb:/ipfs/QmZHu8bW9cG7EyAzhq7VxrTx6AZnQ5CUL6bSwvM5aUwhQF\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"transactions","type":"bytes"}],"stateMutability":"payable","type":"function","name":"multiSend"}],"devdoc":{"kind":"dev","methods":{"multiSend(bytes)":{"details":"Sends multiple transactions and reverts all if one fails.","params":{"transactions":"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"}}},"version":1},"userdoc":{"kind":"user","methods":{"multiSend(bytes)":{"notice":"This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"}},"version":1}},"settings":{"remappings":["erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/","safe-smart-account/=lib/safe-smart-account/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/safe-smart-account/contracts/libraries/MultiSend.sol":"MultiSend"},"evmVersion":"berlin","libraries":{}},"sources":{"lib/safe-smart-account/contracts/libraries/MultiSend.sol":{"keccak256":"0x030bc8f4195cc8cba16efacba3da6870188af2d4b44d739de5d25e01e1473f9f","urls":["bzz-raw://e5a332517a4c7f249ba69f98c093cb61ffe9e1c059699c327c6e2548ac9c7bd3","dweb:/ipfs/QmZHu8bW9cG7EyAzhq7VxrTx6AZnQ5CUL6bSwvM5aUwhQF"],"license":"LGPL-3.0-only"}},"version":1},"id":44}