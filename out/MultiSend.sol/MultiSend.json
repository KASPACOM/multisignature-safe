{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"multiSend","inputs":[{"name":"transactions","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x60a080604052346021573060805261020f908161002782396080518160ac0152f35b600080fdfe6080600436101561000f57600080fd5b60003560e01c638d80ff0a1461002457600080fd5b60203660031901126101be5760043567ffffffffffffffff81116101be57366023820112156101be5780600401359067ffffffffffffffff82116101c357601f8201601f19908116603f0116830167ffffffffffffffff8111848210176101c35760405281835236602483830101116101be57816000926024602093018386013783010152307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146101605780519060205b8281106100e857005b6055818301805160f81c600182015160601c30811502179160158101516035820151948592019060009390816000146101525750600114610142575b505090501561013657016055016100df565b6040513d6000823e3d90fd5b6000938493505af4808238610124565b905083945af1808238610124565b60405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220269abc8018eb1c319d10d55dfb6d74171e9148e2a8226f4fa0fe67ac11da4fb064736f6c634300081a0033","sourceMap":"338:3455:62:-:0;;;;;;;469:4;439:35;;338:3455;;;;;;439:35;338:3455;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080600436101561000f57600080fd5b60003560e01c638d80ff0a1461002457600080fd5b60203660031901126101be5760043567ffffffffffffffff81116101be57366023820112156101be5780600401359067ffffffffffffffff82116101c357601f8201601f19908116603f0116830167ffffffffffffffff8111848210176101c35760405281835236602483830101116101be57816000926024602093018386013783010152307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316146101605780519060205b8281106100e857005b6055818301805160f81c600182015160601c30811502179160158101516035820151948592019060009390816000146101525750600114610142575b505090501561013657016055016100df565b6040513d6000823e3d90fd5b6000938493505af4808238610124565b905083945af1808238610124565b60405162461bcd60e51b815260206004820152603060248201527f4d756c746953656e642073686f756c64206f6e6c792062652063616c6c65642060448201526f1d9a584819195b1959d85d1958d85b1b60821b6064820152608490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220269abc8018eb1c319d10d55dfb6d74171e9148e2a8226f4fa0fe67ac11da4fb064736f6c634300081a0033","sourceMap":"338:3455:62:-:0;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;338:3455:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;338:3455:62;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1375:4;1384:19;-1:-1:-1;;;;;338:3455:62;1367:36;338:3455;;1558:2179;;;338:3455;1558:2179;;;;;;338:3455;1558:2179;;;;;;;;;;;;;;;1375:4;1558:2179;;;;;;;;;;;;;;;;;;338:3455;1558:2179;;;;;;;338:3455;1558:2179;338:3455;;;1558:2179;;;;;;;;;;;;;;338:3455;1558:2179;;338:3455;1558:2179;;;;;;338:3455;1558:2179;;;;;;;;;;;;;;;;;;;;;;;338:3455;;;-1:-1:-1;;;338:3455:62;;;;;;;;;;;;;;;;;-1:-1:-1;;;338:3455:62;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{},"immutableReferences":{"45239":[{"start":172,"length":32}]}},"methodIdentifiers":{"multiSend(bytes)":"8d80ff0a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Nick Dodson - <nick.dodson@consensys.net>Gon\\u00e7alo S\\u00e1 - <goncalo.sa@consensys.net>Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}}},\"title\":\"Multi Send - Allows to batch multiple transactions into one.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multiSend(bytes)\":{\"notice\":\"This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/MultiSend.sol\":\"MultiSend\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"src/libraries/MultiSend.sol\":{\"keccak256\":\"0xcc82a48398e73b9d3ad9c9c8c3d4f779f087b6c4b24070c9d560814843c258af\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://b89fda8dd781bffd397bbd05038bde2f3bf2e9bf316bfa1b37af00fb715c0e33\",\"dweb:/ipfs/QmNrgedeXS6KHkDWtUw2v43PN3dTZDvgAogjXLhkCToWhy\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"transactions","type":"bytes"}],"stateMutability":"payable","type":"function","name":"multiSend"}],"devdoc":{"kind":"dev","methods":{"multiSend(bytes)":{"details":"Sends multiple transactions and reverts all if one fails.","params":{"transactions":"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"}}},"version":1},"userdoc":{"kind":"user","methods":{"multiSend(bytes)":{"notice":"This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"}},"version":1}},"settings":{"remappings":["erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/MultiSend.sol":"MultiSend"},"evmVersion":"berlin","libraries":{},"viaIR":true},"sources":{"src/libraries/MultiSend.sol":{"keccak256":"0xcc82a48398e73b9d3ad9c9c8c3d4f779f087b6c4b24070c9d560814843c258af","urls":["bzz-raw://b89fda8dd781bffd397bbd05038bde2f3bf2e9bf316bfa1b37af00fb715c0e33","dweb:/ipfs/QmNrgedeXS6KHkDWtUw2v43PN3dTZDvgAogjXLhkCToWhy"],"license":"LGPL-3.0-only"}},"version":1},"id":62}