{"abi":[{"type":"function","name":"multiSend","inputs":[{"name":"transactions","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"}],"bytecode":{"object":"0x60808060405234601557610172908161001b8239f35b600080fdfe6080600436101561000f57600080fd5b60003560e01c638d80ff0a1461002457600080fd5b602036600319011261010b5760043567ffffffffffffffff811161010b573660238201121561010b5780600401359067ffffffffffffffff821161012657601f8201601f19908116603f0116830167ffffffffffffffff81118482101761012657604052818352366024838301011161010b5781600092602460209301838601378301015280519060205b8281106100b857005b808201805160f81c600182015160601c91601581015191603582015180946000948593948560001461011057505050505060011461010b575b156100ff57016055016100af565b6040513d6000823e3d90fd5b600080fd5b6055919293949550019130811502175af16100f1565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b1cfb2ac996d91d4556a6551f3b431d74eb211f7e4b92094b61cbac26014c3f264736f6c634300081a0033","sourceMap":"360:3405:63:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x6080600436101561000f57600080fd5b60003560e01c638d80ff0a1461002457600080fd5b602036600319011261010b5760043567ffffffffffffffff811161010b573660238201121561010b5780600401359067ffffffffffffffff821161012657601f8201601f19908116603f0116830167ffffffffffffffff81118482101761012657604052818352366024838301011161010b5781600092602460209301838601378301015280519060205b8281106100b857005b808201805160f81c600182015160601c91601581015191603582015180946000948593948560001461011057505050505060011461010b575b156100ff57016055016100af565b6040513d6000823e3d90fd5b600080fd5b6055919293949550019130811502175af16100f1565b634e487b7160e01b600052604160045260246000fdfea2646970667358221220b1cfb2ac996d91d4556a6551f3b431d74eb211f7e4b92094b61cbac26014c3f264736f6c634300081a0033","sourceMap":"360:3405:63:-:0;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;360:3405:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;360:3405:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1515:2194;;;360:3405;1515:2194;;;;;;360:3405;1515:2194;;;;;;;;;;;;;;;;;;;;;;;;;;360:3405;1515:2194;;;;;;;;;360:3405;;;;;1515:2194;360:3405;;;1515:2194;;;;;;;;;;360:3405;1515:2194;;360:3405;1515:2194;;;;;;360:3405;1515:2194;;;;;;;;;;;;;;;;;;;;;360:3405;;;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"multiSend(bytes)":"8d80ff0a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"transactions\",\"type\":\"bytes\"}],\"name\":\"multiSend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Stefan George - @Georgi87Richard Meissner - @rmeissner\",\"kind\":\"dev\",\"methods\":{\"multiSend(bytes)\":{\"details\":\"Sends multiple transactions and reverts all if one fails.\",\"params\":{\"transactions\":\"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding\"}}},\"title\":\"Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multiSend(bytes)\":{\"notice\":\"The code is for the most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\"}},\"notice\":\"The guard logic is not required here as this contract doesn't support nested delegate calls\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/libraries/MultiSendCallOnly.sol\":\"MultiSendCallOnly\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\"],\"viaIR\":true},\"sources\":{\"src/libraries/MultiSendCallOnly.sol\":{\"keccak256\":\"0x858e75af60f4c6a95ae22910e6448640ef6202416faedc2700f39ba143c318f5\",\"license\":\"LGPL-3.0-only\",\"urls\":[\"bzz-raw://d5924b48fdc061469ec206e7ecddaa3fd69a747dcbc09fd19730646cdaf017c9\",\"dweb:/ipfs/QmTJDXn2kjYcMyAEpHr21veA4FMZ3jpAuMXz2bm6EpZvS7\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes","name":"transactions","type":"bytes"}],"stateMutability":"payable","type":"function","name":"multiSend"}],"devdoc":{"kind":"dev","methods":{"multiSend(bytes)":{"details":"Sends multiple transactions and reverts all if one fails.","params":{"transactions":"Encoded transactions. Each transaction is encoded as a packed bytes of                     operation has to be uint8(0) in this version (=> 1 byte),                     to as a address (=> 20 bytes),                     value as a uint256 (=> 32 bytes),                     data length as a uint256 (=> 32 bytes),                     data as bytes.                     see abi.encodePacked for more information on packed encoding"}}},"version":1},"userdoc":{"kind":"user","methods":{"multiSend(bytes)":{"notice":"The code is for the most part the same as the normal MultiSend (to keep compatibility),         but reverts if a transaction tries to use a delegatecall.This method is payable as delegatecalls keep the msg.value from the previous call         If the calling method (e.g. execTransaction) received ETH this would revert otherwise"}},"version":1}},"settings":{"remappings":["erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/libraries/MultiSendCallOnly.sol":"MultiSendCallOnly"},"evmVersion":"berlin","libraries":{},"viaIR":true},"sources":{"src/libraries/MultiSendCallOnly.sol":{"keccak256":"0x858e75af60f4c6a95ae22910e6448640ef6202416faedc2700f39ba143c318f5","urls":["bzz-raw://d5924b48fdc061469ec206e7ecddaa3fd69a747dcbc09fd19730646cdaf017c9","dweb:/ipfs/QmTJDXn2kjYcMyAEpHr21veA4FMZ3jpAuMXz2bm6EpZvS7"],"license":"LGPL-3.0-only"}},"version":1},"id":63}