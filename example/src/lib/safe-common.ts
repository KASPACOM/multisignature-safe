import { ethers } from 'ethers'
import { 
  ContractNetworksConfig,
  SafeAccountConfig,
  SafeDeploymentConfig,
  PredictedSafeProps
} from '@safe-global/protocol-kit'
import { getNetworkConfig as getNetworkConfigFromConstants, NetworkConfig as ConstantsNetworkConfig } from './constants'

// –ü–µ—Ä–µ—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º NetworkConfig –∏–∑ constants
export type NetworkConfig = ConstantsNetworkConfig

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ç–∏ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
export function getNetworkConfig(): NetworkConfig {
  const chainId = parseInt(process.env.NEXT_PUBLIC_CHAIN_ID || '31337')
  const config = getNetworkConfigFromConstants(chainId)
  return config
}

export function createContractNetworksConfig(config: ConstantsNetworkConfig): ContractNetworksConfig {
  const contractNetworksConfig = {
    [config.chainId]: {
      safeSingletonAddress: config.contracts.safeL2Singleton,
      safeProxyFactoryAddress: config.contracts.safeProxyFactory,
      multiSendAddress: config.contracts.multiSend,
      multiSendCallOnlyAddress: config.contracts.multiSendCallOnly,
      fallbackHandlerAddress: config.contracts.compatibilityFallbackHandler,
      signMessageLibAddress: config.contracts.signMessageLib,
      createCallAddress: config.contracts.createCall,
      simulateTxAccessorAddress: config.contracts.simulateTxAccessor
    }
  }
  
  console.log('üõ†Ô∏è createContractNetworksConfig —Å–æ–∑–¥–∞–ª:', contractNetworksConfig)
  
  return contractNetworksConfig
}


// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
export function getProvider(): ethers.JsonRpcProvider {
  const config = getNetworkConfig()
  return new ethers.JsonRpcProvider(config.rpcUrl)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞
export async function checkWalletConnection(): Promise<ethers.Signer | null> {
  if (typeof window === 'undefined' || !window.ethereum) {
    return null
  }

  try {
    const provider = new ethers.BrowserProvider(window.ethereum)
    const accounts = await provider.listAccounts()
    
    if (accounts.length === 0) {
      return null
    }

    return await provider.getSigner()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error)
    return null
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ—à–µ–ª—å–∫—É
export async function connectWallet(): Promise<ethers.Signer> {
  if (typeof window === 'undefined' || !window.ethereum) {
    throw new Error('MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  }

  try {
    await window.ethereum.request({ method: 'eth_requestAccounts' })
    const provider = new ethers.BrowserProvider(window.ethereum)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º chain ID –æ—Ç MetaMask
    const network = await provider.getNetwork()
    console.log('üåç MetaMask Chain ID:', network.chainId.toString())
    console.log('üåç MetaMask Network:', network)
    
    return await provider.getSigner()
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ—à–µ–ª—å–∫—É:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ—à–µ–ª—å–∫—É')
  }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–¥—Ä–µ—Å–∞ Ethereum
export function isValidAddress(address: string): boolean {
  return ethers.isAddress(address)
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ)
export function formatAddress(address: string): string {
  if (!isValidAddress(address)) return address
  return `${address.slice(0, 6)}...${address.slice(-4)}`
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã –≤ ETH
export function formatEthValue(value: string | bigint): string {
  return ethers.formatEther(value)
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ETH –≤ Wei
export function parseEthValue(value: string): bigint {
  return ethers.parseEther(value)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥—Ä–µ—Å–∞
export async function getBalance(address: string): Promise<string> {
  const provider = getProvider()
  const balance = await provider.getBalance(address)
  return formatEthValue(balance)
}

// –¢–∏–ø—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è window —Å ethereum
declare global {
  interface Window {
    ethereum?: {
      request: (args: { method: string; params?: any[] }) => Promise<any>
      on: (eventName: string, handler: (...args: any[]) => void) => void
      removeListener: (eventName: string, handler: (...args: any[]) => void) => void
    }
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞
export function onAccountsChanged(handler: (accounts: string[]) => void) {
  if (typeof window !== 'undefined' && window.ethereum) {
    window.ethereum.on('accountsChanged', handler)
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–º–µ–Ω—ã —Å–µ—Ç–∏
export function onChainChanged(handler: (chainId: string) => void) {
  if (typeof window !== 'undefined' && window.ethereum) {
    window.ethereum.on('chainChanged', handler)
  }
}

// –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
export function removeEventListeners() {
  if (typeof window !== 'undefined' && window.ethereum) {
    window.ethereum.removeListener('accountsChanged', () => {})
    window.ethereum.removeListener('chainChanged', () => {})
  }
}

