/**
 * –†–µ–µ—Å—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ABI –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
 * –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ Safe Transaction Service API
 */

import { ContractABI, ParsedFunction } from './contract-types'
import { ContractsAPI } from './contracts-api'

export class ContractRegistry {
  private static instance: ContractRegistry
  private contracts: Map<string, ContractABI> = new Map()
  private contractsAPI: ContractsAPI | null = null
  private isLoading = false
  private loadingPromise: Promise<void> | null = null

  private constructor() {
    // –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø—É—Å—Ç–æ–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤ loadContracts()
  }

  static getInstance(): ContractRegistry {
    if (!ContractRegistry.instance) {
      ContractRegistry.instance = new ContractRegistry()
    }
    return ContractRegistry.instance
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ chainId
   */
  initializeForChain(chainId: bigint): void {
    console.log(`üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ContractRegistry –¥–ª—è chainId: ${chainId}`)
    this.contractsAPI = new ContractsAPI(chainId)
    
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
    this.contracts.clear()
    this.loadingPromise = null
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∏–∑ Safe Transaction Service API
   */
  async loadContracts(options?: {
    limit?: number
    offset?: number
    trusted?: boolean
    forceReload?: boolean
  }): Promise<void> {
    if (!this.contractsAPI) {
      throw new Error('ContractRegistry –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeForChain() —Å–Ω–∞—á–∞–ª–∞.')
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (this.isLoading && this.loadingPromise) {
      console.log('‚è≥ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è, –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...')
      return this.loadingPromise
    }

    // –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞
    if (this.contracts.size > 0 && !options?.forceReload) {
      console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: ${this.contracts.size}`)
      return
    }

    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ API...')
    this.isLoading = true

    this.loadingPromise = this.performLoad(options)
    
    try {
      await this.loadingPromise
    } finally {
      this.isLoading = false
      this.loadingPromise = null
    }
  }

  private async performLoad(options?: {
    limit?: number
    offset?: number
    trusted?: boolean
  }): Promise<void> {
    try {
      const contracts = await this.contractsAPI!.getContracts(options)
      
      console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ API: ${contracts.length}`)
      
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      this.contracts.clear()
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      contracts.forEach(contract => {
        this.addContract(contract)
      })

      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤: ${this.contracts.size}`)
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: ${error.message}`)
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ —Ä–µ–µ—Å—Ç—Ä
   */
  addContract(contract: ContractABI): void {
    const key = contract.address.toLowerCase()
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ parsedFunctions —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    if (!contract.parsedFunctions) {
      console.warn(`‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç ${contract.name} –Ω–µ –∏–º–µ–µ—Ç parsedFunctions, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
      return
    }
    
    this.contracts.set(key, contract)
    
    console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç ${contract.name} (${contract.address})`)
    console.log(`   –§—É–Ω–∫—Ü–∏–π –¥–ª—è Safe: ${contract.parsedFunctions.length}`)
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É
   */
  getContract(address: string): ContractABI | null {
    const key = address.toLowerCase()
    return this.contracts.get(key) || null
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
   */
  getAllContracts(): ContractABI[] {
    return Array.from(this.contracts.values())
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  getContractFunctions(address: string): ParsedFunction[] {
    const contract = this.getContract(address)
    return contract?.parsedFunctions || []
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–æ –∞–¥—Ä–µ—Å—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ –∏–º–µ–Ω–∏ —Ñ—É–Ω–∫—Ü–∏–∏
   */
  getFunction(address: string, functionName: string): ParsedFunction | null {
    const functions = this.getContractFunctions(address)
    return functions.find(func => func.name === functionName) || null
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
   */
  hasContract(address: string): boolean {
    const key = address.toLowerCase()
    return this.contracts.has(key)
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É –∏–∑ API
   */
  async loadContract(address: string): Promise<ContractABI | null> {
    if (!this.contractsAPI) {
      throw new Error('ContractRegistry –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ initializeForChain() —Å–Ω–∞—á–∞–ª–∞.')
    }

    try {
      console.log(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ API: ${address}`)
      const contract = await this.contractsAPI.getContract(address)
      
      if (contract) {
        this.addContract(contract)
        console.log(`‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω: ${contract.name}`)
      } else {
        console.log(`‚ÑπÔ∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API: ${address}`)
      }
      
      return contract
    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ${address}:`, error)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–≥—Ä—É–∑–∫–∏
   */
  getLoadingStatus(): {
    isLoading: boolean
    contractsCount: number
    hasContracts: boolean
  } {
    return {
      isLoading: this.isLoading,
      contractsCount: this.contracts.size,
      hasContracts: this.contracts.size > 0
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
   */
  clear(): void {
    console.log('üßπ –û—á–∏—â–∞–µ–º —Ä–µ–µ—Å—Ç—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤')
    this.contracts.clear()
    this.contractsAPI = null
    this.loadingPromise = null
    this.isLoading = false
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const contractRegistry = ContractRegistry.getInstance()