import { BrowserProvider, Eip1193Provider, ethers } from 'ethers'
import { getSafeConfig } from './network-types'
import Safe from '@safe-global/protocol-kit'
import {
  SafeTransaction,
  MetaTransactionData,
  SafeTransactionDataPartial
} from '@safe-global/types-kit'
import {
  SafeAccountConfig,
  PredictedSafeProps,
  SafeConfig,
  ConnectSafeConfig
} from '@safe-global/protocol-kit'

import {
  getNetworkConfig,
  createContractNetworksConfig
} from './safe-common'
import { UniversalOperationResult } from './offchain'
import { Network } from './network-types'


export interface CreateSafeParams {
  owners: string[]
  threshold: number
  network: Network
}


export interface TransactionParams {
  to: string
  value: string
  data: string
}


export interface SafeConnectionForm {
  safeAddress: string
  owners: string[]
  threshold: number
  safeVersion?: string
  fallbackHandler?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Safe
export interface SafeCreationForm {
  owners: string[]
  threshold: number
  safeVersion?: string
  fallbackHandler?: string
}


export interface UniversalFunctionCall {
  contractAddress: string
  functionSignature: string
  functionParams: any[]
  value?: string
}

export class SafeOnChain {
  private network: Network
  private networkConfig = getNetworkConfig()
  private contractNetworks = createContractNetworksConfig(this.networkConfig)
  private safeSdk: Safe | null = null
  private currentSafeAddress: string | null = null

  constructor(network: Network) {
    this.network = network
    console.log('üåê SafeOnChain: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å Network:', {
      chainId: network.id.toString(),
      hasProvider: !!network.provider,
      hasSigner: !!network.signer
    })
  }

  async updateNetwork(newNetwork: Network) {
    console.log('üîÑ SafeOnChain: –û–±–Ω–æ–≤–ª—è–µ–º Network –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∏/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')

    try {
      const oldAddress = await this.network?.signer?.getAddress()
      const newAddress = await newNetwork?.signer?.getAddress()
      console.log('üìç –°—Ç–∞—Ä—ã–π –∞–¥—Ä–µ—Å:', oldAddress || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
      console.log('üìç –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å:', newAddress || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
      console.log('üìç –°—Ç–∞—Ä–∞—è —Å–µ—Ç—å:', this.network?.id?.toString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
      console.log('üìç –ù–æ–≤–∞—è —Å–µ—Ç—å:', newNetwork?.id?.toString() || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞')
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Network:', error)
    }

    this.network = newNetwork

    this.safeSdk = null
    this.currentSafeAddress = null

    console.log('‚úÖ SafeOnChain: Network –æ–±–Ω–æ–≤–ª–µ–Ω! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe.')
  }

  getSafeSdk(): Safe {
    if (!this.safeSdk) {
      throw new Error('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Safe.')
    }
    return this.safeSdk
  }

  getCurrentSafeAddress(): string | null {
    return this.currentSafeAddress
  }

  async getSignerAddress(): Promise<string> {
    return await this.network.signer.getAddress()
  }

  getCurrentNetwork(): Network {
    return this.network
  }

  isConnected(): boolean {
    const hasSafeSdk = this.safeSdk !== null
    const hasCurrentSafeAddress = this.currentSafeAddress !== null
    return hasSafeSdk && hasCurrentSafeAddress
  }

  async createSafeWithForm(form: SafeCreationForm): Promise<Safe> {
    const { owners, threshold } = form

    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Safe —Å —Ñ–æ—Ä–º–æ–π:', { owners, threshold })

    const safeAccountConfig: SafeAccountConfig = {
      owners,
      threshold,
      fallbackHandler: form.fallbackHandler || this.networkConfig.contracts.compatibilityFallbackHandler
    }

    console.log('üìã SafeAccountConfig:', safeAccountConfig)
    console.log('üåê Contract networks:', this.contractNetworks)

    const predictedSafe: PredictedSafeProps = {
      safeAccountConfig,
      safeDeploymentConfig: {
        safeVersion: '1.4.1'
      }
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getSafeConfig
    console.log('üîç Network eip1193Provider:', this.network.eip1193Provider)
    console.log('üîç EIP-1193 provider methods:', Object.getOwnPropertyNames(this.network.eip1193Provider || {}))

    const safeConfig = await getSafeConfig(this.network, {
      predictedSafe,
      contractNetworks: this.contractNetworks
    }) as SafeConfig

    try {
      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Safe SDK...', safeConfig)
      const safeSdk = await Safe.init(safeConfig)

      console.log('üîÆ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å...')
      const predictedAddress = await safeSdk.getAddress()
      console.log('üìç Predicted Safe address:', predictedAddress)


      const provider = this.network.provider
      const existingCode = await provider.getCode(predictedAddress)

      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞:')
      console.log('  üìç –ê–¥—Ä–µ—Å:', predictedAddress)
      console.log('  üìã –ö–æ–¥:', existingCode)
      console.log('  üìè –î–ª–∏–Ω–∞:', existingCode?.length || 0)
      console.log('  ‚úÖ –£—Å–ª–æ–≤–∏–µ existingCode:', !!existingCode)
      console.log('  ‚úÖ –£—Å–ª–æ–≤–∏–µ !== "0x":', existingCode !== '0x')
      console.log('  ‚úÖ –£—Å–ª–æ–≤–∏–µ length > 2:', (existingCode?.length || 0) > 2)
      console.log('  üéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', !!(existingCode && existingCode !== '0x' && existingCode.length > 2))

      if (existingCode && existingCode !== '0x' && existingCode.length > 2) {
        console.log('üîç –ü–æ –∞–¥—Ä–µ—Å—É –µ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ç–æ –ª–∏ Safe...')
        console.log('üìç –ê–¥—Ä–µ—Å:', predictedAddress)

        try {

          const existingSafeConfig = await getSafeConfig(this.network, {
            safeAddress: predictedAddress,
            contractNetworks: this.contractNetworks
          }) as SafeConfig

          console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ Safe...')
          const existingSafeSdk = await Safe.init(existingSafeConfig)


          console.log('‚úÖ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Safe! –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–º—É...')
          console.log('üîÑ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï: PREDICT MODE ‚Üí ADDRESS MODE')
          console.log('üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', form.owners)
          console.log('üî¢ –ü–æ—Ä–æ–≥:', form.threshold)


          this.safeSdk = existingSafeSdk
          this.currentSafeAddress = predictedAddress

          console.log('üîó –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Safe –≤ ADDRESS MODE:', predictedAddress)
          return existingSafeSdk

        } catch (error) {
          console.log('‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç –ø–æ –∞–¥—Ä–µ—Å—É —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ Safe:', error)
          console.log('üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Safe...')

        }
      }

      console.log('‚úÖ –ê–¥—Ä–µ—Å —Å–≤–æ–±–æ–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º Safe...')

      console.log('üõ†Ô∏è Deploying Safe –≤ PREDICT MODE...')
      const deploymentTransaction = await safeSdk.createSafeDeploymentTransaction()
      const txResponse = await this.network.signer.sendTransaction({
        to: deploymentTransaction.to,
        value: deploymentTransaction.value,
        data: deploymentTransaction.data
      })

      console.log('üìù Safe deployment transaction:', txResponse.hash)

      const receipt = await txResponse.wait?.()
      console.log('‚úÖ Safe deployed in block:', receipt?.blockNumber)

      const deployedSafeAddress = await safeSdk.getAddress()
      this.safeSdk = safeSdk
      this.currentSafeAddress = deployedSafeAddress

      console.log('üéâ Safe —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –≤ ADDRESS MODE:', deployedSafeAddress)

      const [version, owners, threshold, nonce, balance] = await Promise.all([
        safeSdk.getContractVersion(),
        safeSdk.getOwners(),
        safeSdk.getThreshold(),
        safeSdk.getNonce(),
        safeSdk.getBalance()
      ])

      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe:')
      console.log('  üîç –í–µ—Ä—Å–∏—è:', version)
      console.log('  üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', owners)
      console.log('  üî¢ –ü–æ—Ä–æ–≥:', threshold)
      console.log('  üìù Nonce:', nonce)
      console.log('  üí∞ –ë–∞–ª–∞–Ω—Å:', balance)

      return safeSdk

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Safe:', error.message)
      throw error
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Safe (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  async createSafe(params: CreateSafeParams): Promise<Safe> {
    const form: SafeCreationForm = {
      owners: params.owners,
      threshold: params.threshold
    }
    return this.createSafeWithForm(form)
  }


  async connectToSafeWithForm(form: SafeConnectionForm): Promise<Safe> {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe —Å —Ñ–æ—Ä–º–æ–π:')
    console.log('  üìç –ê–¥—Ä–µ—Å:', form.safeAddress)
    console.log('  üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', form.owners)
    console.log('  üî¢ –ü–æ—Ä–æ–≥:', form.threshold)
    console.log('  üîñ –í–µ—Ä—Å–∏—è:', form.safeVersion)

    try {
      const safeConfig = await getSafeConfig(this.network, {
        safeAddress: form.safeAddress,
        contractNetworks: this.contractNetworks,
      }) as SafeConfig

      console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Safe SDK –¥–ª—è –°–£–©–ï–°–¢–í–£–Æ–©–ï–ì–û Safe...')
      const safeSdk = await Safe.init(safeConfig)

      this.safeSdk = safeSdk
      this.currentSafeAddress = form.safeAddress

      console.log('‚úÖ Safe —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω:', form.safeAddress)

      const [actualOwners, actualThreshold, nonce, balance] = await Promise.all([
        safeSdk.getOwners(),
        safeSdk.getThreshold(),
        safeSdk.getNonce(),
        safeSdk.getBalance()
      ])

      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–º Safe:')
      console.log('  üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', actualOwners)
      console.log('  üî¢ –ü–æ—Ä–æ–≥:', actualThreshold)
      console.log('  üìù Nonce:', nonce)
      console.log('  üí∞ –ë–∞–ª–∞–Ω—Å:', ethers.formatEther(balance), 'ETH')

      if (actualOwners.length !== form.owners.length || actualThreshold !== form.threshold) {
        console.warn('‚ö†Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º Safe!')
        console.warn('  –§–æ—Ä–º–∞ –≤–ª–∞–¥–µ–ª—å—Ü—ã/–ø–æ—Ä–æ–≥:', form.owners.length, '/', form.threshold)
        console.warn('  –†–µ–∞–ª—å–Ω—ã–µ –≤–ª–∞–¥–µ–ª—å—Ü—ã/–ø–æ—Ä–æ–≥:', actualOwners.length, '/', actualThreshold)
      }

      return safeSdk

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe:', error)
      this.safeSdk = null
      this.currentSafeAddress = null
      throw error
    }
  }


  disconnect(): void {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Safe:', this.currentSafeAddress)
    this.safeSdk = null
    this.currentSafeAddress = null
  }

  async getSafeAddressByForm(form: SafeCreationForm): Promise<string> {
    console.log('üîÆ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å Safe –ø–æ —Ñ–æ—Ä–º–µ...')
    console.log('üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', form.owners)
    console.log('üî¢ –ü–æ—Ä–æ–≥:', form.threshold)

    try {
      const predictedSafe: PredictedSafeProps = {
        safeAccountConfig: {
          owners: form.owners,
          threshold: form.threshold,
          fallbackHandler: form.fallbackHandler || this.networkConfig.contracts.compatibilityFallbackHandler
        },
        safeDeploymentConfig: {
          safeVersion: '1.4.1'
        }
      }

      const safeConfig = await getSafeConfig(this.network, {
        predictedSafe,
        contractNetworks: this.contractNetworks,
      }) as SafeConfig

      const safeSdk = await Safe.init(safeConfig)
      const predictedAddress = await safeSdk.getAddress()

      console.log('üìç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å Safe:', predictedAddress)
      return predictedAddress

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ Safe:', error)
      throw error
    }
  }

  async isSafeDeployed(safeAddress: string): Promise<boolean> {
    try {
      const provider = this.network.provider
      const code = await provider.getCode(safeAddress)

      console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Safe –ø–æ –∞–¥—Ä–µ—Å—É ${safeAddress}:`, {
        codeLength: code.length,
        hasCode: code && code !== '0x' && code.length > 2
      })

      if (!code || code === '0x' || code.length <= 2) {
        console.log('‚ùå Safe –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–µ—Ç –∫–æ–¥–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
        return false
      }

      console.log('‚úÖ Safe –Ω–∞–π–¥–µ–Ω - –µ—Å—Ç—å –∫–æ–¥ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')
      return true
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Safe –ø–æ –∞–¥—Ä–µ—Å—É:', safeAddress, error)
      return false
    }
  }

  async getCurrentSafeInfo() {
    const safeSdk = this.getSafeSdk()
    const safeAddress = this.getCurrentSafeAddress()

    if (!safeAddress) {
      throw new Error('–ê–¥—Ä–µ—Å Safe –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    }

    const isDeployed = await safeSdk.isSafeDeployed()

    console.log('üîç Safe –¥–µ–ø–ª–æ–µ–Ω:', isDeployed)
    console.log('üîç Safe safeSdk.getOwners:', await safeSdk.getOwners())
    console.log('üîç Safe safeSdk.getThreshold:', await safeSdk.getThreshold())
    console.log('üîç Safe safeSdk.getBalance:', await safeSdk.getBalance())
    console.log('üîç Safe safeSdk.getNonce:', await safeSdk.getNonce())
    console.log('üîç Safe safeSdk.getContractVersion:', await safeSdk.getContractVersion())

    const [owners, threshold, balance, nonce, version] = await Promise.all([
      safeSdk.getOwners(),
      safeSdk.getThreshold(),
      safeSdk.getBalance(),
      safeSdk.getNonce(),
      safeSdk.getContractVersion()
    ])

    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe:')
    console.log('  üë• –í–ª–∞–¥–µ–ª—å—Ü—ã:', owners)
    console.log('  üî¢ –ü–æ—Ä–æ–≥:', threshold)
    console.log('  üí∞ –ë–∞–ª–∞–Ω—Å:', ethers.formatEther(balance), 'ETH')
    console.log('  üìù Nonce:', nonce)
    console.log('  üîñ –í–µ—Ä—Å–∏—è:', version)

    return {
      address: safeAddress,
      owners,
      threshold,
      balance: ethers.formatEther(balance),
      nonce,
      version,
      isDeployed: await safeSdk.isSafeDeployed()
    }
  }

  encodeFunctionCall(functionCall: UniversalFunctionCall): string {
    try {
      console.log('üîß –ö–æ–¥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏:', functionCall.functionSignature)
      console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', functionCall.functionParams)

      const functionAbi = [`function ${functionCall.functionSignature}`]
      const contractInterface = new ethers.Interface(functionAbi)

      const functionName = functionCall.functionSignature.split('(')[0]

      const encodedData = contractInterface.encodeFunctionData(functionName, functionCall.functionParams)

      console.log('‚úÖ –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', encodedData)
      return encodedData

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', error)
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é ${functionCall.functionSignature}: ${error}`)
    }
  }

  async createUniversalTransactionHash(
    functionCall: UniversalFunctionCall
  ): Promise<UniversalOperationResult> {
    console.log('üèóÔ∏è –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ Safe...')

    const safeSdk = this.getSafeSdk()
    const safeAddress = this.getCurrentSafeAddress()

    if (!safeAddress) {
      throw new Error('Safe –∞–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    }

    try {
      const encodedData = this.encodeFunctionCall(functionCall)

      const transactionParams: TransactionParams = {
        to: functionCall.contractAddress,
        value: functionCall.value || '0',
        data: encodedData
      }

      console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:')
      console.log(`   - Safe: ${safeAddress}`)
      console.log(`   - To: ${transactionParams.to}`)
      console.log(`   - Value: ${transactionParams.value} ETH`)
      console.log(`   - Data: ${transactionParams.data}`)

      const safeTransaction = await this.createSafeTransaction(transactionParams)

      const nonce = safeTransaction.data.nonce
      console.log(`   - Nonce (–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏): ${nonce}`)

      const transactionHash = await this.getTransactionHash(safeTransaction)

      console.log('üéØ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', transactionHash)

      return {
        transactionHash,
        safeTransaction,
        encodedData,
        transactionDetails: {
          to: transactionParams.to,
          value: transactionParams.value,
          data: transactionParams.data,
          nonce
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      throw error
    }
  }

  async createSafeTransaction(
    transactionParams: TransactionParams
  ): Promise<SafeTransaction> {
    const safeSdk = this.getSafeSdk()

    const metaTransactionData: MetaTransactionData = {
      to: transactionParams.to,
      value: ethers.parseEther(transactionParams.value).toString(),
      data: transactionParams.data
    }

    const safeTransaction = await safeSdk.createTransaction({
      transactions: [metaTransactionData]
    })
    return safeTransaction
  }

  async createMultiSendTransaction(
    transactions: TransactionParams[]
  ): Promise<SafeTransaction> {
    const safeSdk = this.getSafeSdk()

    const metaTransactions: MetaTransactionData[] = transactions.map(tx => ({
      to: tx.to,
      value: ethers.parseEther(tx.value).toString(),
      data: tx.data
    }))

    const safeTransaction = await safeSdk.createTransaction({
      transactions: metaTransactions
    })

    return safeTransaction
  }

  async signTransaction(
    safeTransaction: SafeTransaction
  ): Promise<SafeTransaction> {
    const safeSdk = this.getSafeSdk()
    const signedTransaction = await safeSdk.signTransaction(safeTransaction)
    return signedTransaction
  }

  async getTransactionHash(
    safeTransaction: SafeTransaction
  ): Promise<string> {
    const safeSdk = this.getSafeSdk()
    return await safeSdk.getTransactionHash(safeTransaction)
  }

  getSignatureFromTransaction(
    safeTransaction: SafeTransaction,
    signerAddress: string
  ): string | undefined {
    const signatures = safeTransaction.signatures
    if (!signatures) return undefined

    const signature = signatures.get(signerAddress.toLowerCase())
    return signature ? ((typeof signature === 'object' && signature && 'data' in signature) ? String(signature.data) : String(signature)) : undefined
  }

  async executeTransaction(
    safeTransaction: SafeTransaction
  ): Promise<any> {
    const safeSdk = this.getSafeSdk()
    const safeAddress = this.getCurrentSafeAddress()

    console.log('üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Safe:', safeAddress)
    const executeTxResponse = await safeSdk.executeTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, —Ö–µ—à:', executeTxResponse.hash)

    return {
      hash: executeTxResponse.hash,
      response: executeTxResponse
    }
  }

  async executeTransactionWithSignatures(
    safeTransaction: SafeTransaction,
    signatures: Array<{
      signer: string
      signature: string
    }>
  ): Promise<any> {
    console.log('üöÄ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...')

    const safeSdk = this.getSafeSdk()
    const safeAddress = this.getCurrentSafeAddress()

    const actualOwners = await safeSdk.getOwners()

    for (const sig of signatures) {
      const isOwner = actualOwners.map(o => o.toLowerCase()).includes(sig.signer.toLowerCase())
      if (!isOwner) {
        throw new Error(`–ê–¥—Ä–µ—Å ${sig.signer} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Safe! –í–ª–∞–¥–µ–ª—å—Ü—ã: ${actualOwners.join(', ')}`)
      }
    }

    const sortedSignatures = [...signatures].sort((a, b) => {
      return a.signer.toLowerCase().localeCompare(b.signer.toLowerCase())
    })

    console.log('üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π:', sortedSignatures.map(s => s.signer))

    for (const sig of sortedSignatures) {
      console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –æ—Ç ${sig.signer}:`, sig.signature.slice(0, 10) + '...')

      const safeSignature = {
        signer: sig.signer,
        data: sig.signature,
        isContractSignature: false,
        staticPart: (dynamicOffset?: string) => sig.signature,
        dynamicPart: () => ''
      }

      safeTransaction.addSignature(safeSignature)
    }

    console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${signatures.length} –ø–æ–¥–ø–∏—Å–µ–π`)
    console.log('üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–µ–π:', safeTransaction.signatures.size)

    const threshold = await safeSdk.getThreshold()
    console.log(`üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–µ–π: ${threshold}, –∏–º–µ–µ—Ç—Å—è: ${safeTransaction.signatures.size}`)

    if (safeTransaction.signatures.size < threshold) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}, –ø–æ–ª—É—á–µ–Ω–æ: ${safeTransaction.signatures.size}`)
    }

    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...')
    const executeTxResponse = await safeSdk.executeTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –•–µ—à:', executeTxResponse.hash)

    return {
      hash: executeTxResponse.hash,
      response: executeTxResponse,
      signaturesUsed: signatures.length,
      threshold: threshold
    }
  }

  async createAndSignTransaction(transactions: Array<{ to: string, data: string, value?: string }>): Promise<SafeTransaction> {
    const safeSdk = this.getSafeSdk()

    console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Safe SDK...')

    const metaTransactions = transactions.map(tx => ({
      to: tx.to,
      data: tx.data,
      value: tx.value || '0'
    }))

    const safeTransaction = await safeSdk.createTransaction({ transactions: metaTransactions })

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ EIP-712...')

    await safeSdk.signTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ EIP-712!')
    console.log('üìä –ü–æ–¥–ø–∏—Å–µ–π –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', safeTransaction.signatures.size)

    return safeTransaction
  }

  async executeSignedTransaction(safeTransaction: SafeTransaction): Promise<any> {
    const safeSdk = this.getSafeSdk()
    const threshold = await safeSdk.getThreshold()

    console.log(`üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–µ–π: ${threshold}, –µ—Å—Ç—å: ${safeTransaction.signatures.size}`)

    if (safeTransaction.signatures.size < threshold) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}, –µ—Å—Ç—å: ${safeTransaction.signatures.size}`)
    }

    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...')

    const executeTxResponse = await safeSdk.executeTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –•—ç—à:', executeTxResponse.hash)

    return {
      hash: executeTxResponse.hash,
      response: executeTxResponse,
      signaturesUsed: safeTransaction.signatures.size,
      threshold: threshold
    }
  }

  async createSignAndExecute(transactions: Array<{ to: string, data: string, value?: string }>): Promise<any> {
    console.log('üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞—Ç—å -> –ø–æ–¥–ø–∏—Å–∞—Ç—å -> –≤—ã–ø–æ–ª–Ω–∏—Ç—å')

    const signedTransaction = await this.createAndSignTransaction(transactions)

    return await this.executeSignedTransaction(signedTransaction)
  }

  async approveTransactionHash(safeTransaction: SafeTransaction): Promise<string> {
    const currentAddress = this.getCurrentSafeAddress()
    if (!currentAddress) {
      throw new Error('Safe –∞–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    }

    const lazyConfig = await getSafeConfig(this.network, {
      safeAddress: currentAddress,
      contractNetworks: this.contractNetworks
    }) as SafeConfig

    const safeSdk = await Safe.init(lazyConfig)

    const isDeployed = await safeSdk.isSafeDeployed()
    if (!isDeployed) {
      throw new Error(`Safe –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ Safe –ø–æ –∞–¥—Ä–µ—Å—É: ${currentAddress}`)
    }

    const txHash = await safeSdk.getTransactionHash(safeTransaction)

    console.log('üìù –û–¥–æ–±—Ä—è–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txHash)

    const approveTxResponse = await safeSdk.approveTransactionHash(txHash)

    console.log('‚úÖ –•—ç—à –æ–¥–æ–±—Ä–µ–Ω! Tx:', approveTxResponse.hash)
    return txHash
  }

  async checkApprovedOwners(transactionHash: string): Promise<string[]> {
    const safeSdk = this.getSafeSdk()

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ç–æ –æ–¥–æ–±—Ä–∏–ª —Ö—ç—à:', transactionHash)

    const approvedOwners = await safeSdk.getOwnersWhoApprovedTx(transactionHash)

    console.log('üë• –í–ª–∞–¥–µ–ª—å—Ü—ã –æ–¥–æ–±—Ä–∏–≤—à–∏–µ —Ö—ç—à:', approvedOwners)
    return approvedOwners
  }

  async executeWithMixedSignatures(safeTransaction: SafeTransaction): Promise<any> {
    const safeSdk = this.getSafeSdk()
    const threshold = await safeSdk.getThreshold()

    const txHash = await safeSdk.getTransactionHash(safeTransaction)
    const approvedOwners = await this.checkApprovedOwners(txHash)

    const existingSignatures = safeTransaction.signatures.size
    const totalSignatures = existingSignatures + approvedOwners.length

    console.log(`üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}`)
    console.log(`üìù EIP-712 –ø–æ–¥–ø–∏—Å–µ–π: ${existingSignatures}`)
    console.log(`‚úÖ Approved hash: ${approvedOwners.length}`)
    console.log(`üî¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–µ–π: ${totalSignatures}`)

    if (totalSignatures < threshold) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}, –µ—Å—Ç—å: ${totalSignatures} (EIP-712: ${existingSignatures}, approved: ${approvedOwners.length})`)
    }

    if (approvedOwners.length > 0) {
      const sortedOwners = approvedOwners.sort((a, b) =>
        a.toLowerCase().localeCompare(b.toLowerCase())
      )

      sortedOwners.forEach(owner => {
        const approvedSignature = {
          signer: owner.toLowerCase(),
          data: `0x${owner.slice(2).padStart(64, '0')}${'0'.repeat(64)}01`,
          isContractSignature: false,
          staticPart: () => `0x${owner.slice(2).padStart(64, '0')}${'0'.repeat(64)}01`,
          dynamicPart: () => ''
        }

        safeTransaction.addSignature(approvedSignature)
      })

      console.log('‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã approved hash –ø–æ–¥–ø–∏—Å–∏')
    }

    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å mixed –ø–æ–¥–ø–∏—Å—è–º–∏...')


    const executeTxResponse = await safeSdk.executeTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –•—ç—à:', executeTxResponse.hash)
    return {
      hash: executeTxResponse.hash,
      response: executeTxResponse,
      eip712Signatures: existingSignatures,
      approvedHashSignatures: approvedOwners.length,
      totalSignatures: totalSignatures,
      threshold: threshold
    }
  }

  async proposeTransaction(params: TransactionParams): Promise<string> {
    console.log('üìù SafeOnChain: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...')

    if (!this.isConnected()) {
      throw new Error('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    }

    try {
      const safeTransaction = await this.createSafeTransaction(params)

      const signedTransaction = await this.signTransaction(safeTransaction)

      const safeTxHash = await this.getTransactionHash(signedTransaction)

      await this.approveTransactionHash(signedTransaction)

      console.log('‚úÖ SafeOnChain: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ –∏ –æ–¥–æ–±—Ä–µ–Ω–∞:', safeTxHash)
      return safeTxHash

    } catch (error) {
      console.error('‚ùå SafeOnChain: –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      throw error
    }
  }


  async executeTransactionByHash(safeTxHash: string, safeOffChain?: any): Promise<string> {
    console.log('üöÄ SafeOnChain: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É:', safeTxHash)

    if (!this.isConnected()) {
      throw new Error('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
    }

    try {
      let safeTransaction: SafeTransaction

      if (safeOffChain) {

        console.log('üì° –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ STS...')
        const txFromSTS = await safeOffChain.getTransaction(safeTxHash)


        safeTransaction = await this.createSafeTransaction({
          to: txFromSTS.to,
          value: txFromSTS.value || '0',
          data: txFromSTS.data || '0x'
        })


        if (txFromSTS.nonce !== undefined) {
          safeTransaction.data.nonce = parseInt(txFromSTS.nonce.toString())
        }

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ –∏–∑ confirmations STS
        if (txFromSTS.confirmations && txFromSTS.confirmations.length > 0) {
          console.log(`üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${txFromSTS.confirmations.length} –ø–æ–¥–ø–∏—Å–µ–π –∏–∑ STS...`)
          
          for (const confirmation of txFromSTS.confirmations) {
            if (confirmation.signature && confirmation.signature !== '0x' && confirmation.signatureType === 'EOA') {
              console.log(`üìù –î–æ–±–∞–≤–ª—è–µ–º EIP-712 –ø–æ–¥–ø–∏—Å—å –æ—Ç ${confirmation.owner}`)
              
              // –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è SafeSDK
              const signature = {
                signer: confirmation.owner.toLowerCase(),
                data: confirmation.signature,
                isContractSignature: false,
                staticPart: () => confirmation.signature,
                dynamicPart: () => ''
              }
              
              safeTransaction.addSignature(signature)
            }
          }
          
          console.log(`‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ${safeTransaction.signatures.size} EIP-712 –ø–æ–¥–ø–∏—Å–µ–π –∏–∑ STS`)
        }

        console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ STS')
      } else {
        throw new Error('–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ö–µ—à—É —Ç—Ä–µ–±—É–µ—Ç—Å—è SafeOffChain –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
      }

      const result = await this.executeWithPreApprovals(safeTransaction)

      console.log('‚úÖ SafeOnChain: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ —Ö–µ—à—É:', result.hash)
      return result.hash

    } catch (error) {
      console.error('‚ùå SafeOnChain: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ —Ö–µ—à—É:', error)
      throw error
    }
  }

  async getTransactionInfo(safeTxHash: string, safeOffChain?: any): Promise<any> {
    if (!safeOffChain) {
      throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è SafeOffChain –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    }

    try {
      const [txData, status] = await Promise.all([
        safeOffChain.getTransaction(safeTxHash),
        safeOffChain.getTransactionStatus(safeTxHash)
      ])

      return {
        safeTxHash,
        to: txData.to,
        value: txData.value || '0',
        data: txData.data || '0x',
        nonce: parseInt(txData.nonce?.toString() || '0'),
        isExecuted: status.isExecuted,
        confirmationsCount: status.confirmationsCount,
        requiredConfirmations: status.requiredConfirmations,
        canExecute: status.canExecute
      }
    } catch (error) {
      console.error('‚ùå SafeOnChain: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      throw error
    }
  }

  async executeWithPreApprovals(safeTransaction: SafeTransaction): Promise<any> {
    const currentAddress = this.getCurrentSafeAddress()
    if (!currentAddress) {
      throw new Error('Safe –∞–¥—Ä–µ—Å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
    }

    const lazyConfig = await getSafeConfig(this.network, {
      safeAddress: currentAddress,
      contractNetworks: this.contractNetworks
    }) as SafeConfig

    const safeSdk = await Safe.init(lazyConfig)

    const isDeployed = await safeSdk.isSafeDeployed()
    if (!isDeployed) {
      throw new Error(`Safe –Ω–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç! –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ Safe –ø–æ –∞–¥—Ä–µ—Å—É: ${currentAddress}`)
    }

    const threshold = await safeSdk.getThreshold()
    const txHash = await safeSdk.getTransactionHash(safeTransaction)

    console.log('üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...')
    console.log('üìã –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txHash)

    // –ü–æ–ª—É—á–∞–µ–º EIP-712 –ø–æ–¥–ø–∏—Å–∏ –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const existingSignatures = safeTransaction.signatures.size
    const eip712Signers = Array.from(safeTransaction.signatures.values()).map(sig => sig.signer)
    
    // –ü–æ–ª—É—á–∞–µ–º approved hash'—ã –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞
    const approvedOwners = await this.checkApprovedOwners(txHash)
    
    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalSignatures = existingSignatures + approvedOwners.length

    console.log(`üéØ –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}`)
    console.log(`üìù EIP-712 –ø–æ–¥–ø–∏—Å–µ–π: ${existingSignatures}`)
    console.log(`üë• EIP-712 –ø–æ–¥–ø–∏—Å–∞–Ω—Ç—ã: [${eip712Signers.join(', ')}]`)
    console.log(`‚úÖ Approved hash: ${approvedOwners.length}`)
    console.log(`üë• Approved –≤–ª–∞–¥–µ–ª—å—Ü—ã: [${approvedOwners.join(', ')}]`)
    console.log(`üî¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–µ–π: ${totalSignatures}`)

    if (totalSignatures < threshold) {
      const missing = threshold - totalSignatures
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${threshold}, –µ—Å—Ç—å: ${totalSignatures} (EIP-712: ${existingSignatures}, approved: ${approvedOwners.length}). –ù—É–∂–Ω–æ –µ—â–µ ${missing} –ø–æ–¥–ø–∏—Å–µ–π.`)
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é safeTransaction (—Å EIP-712 –ø–æ–¥–ø–∏—Å—è–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å)
    // –î–æ–±–∞–≤–ª—è–µ–º approved –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (approvedOwners.length > 0) {
      const sortedOwners = approvedOwners.sort((a, b) =>
        a.toLowerCase().localeCompare(b.toLowerCase())
      )

      console.log('üîÑ –î–æ–±–∞–≤–ª—è–µ–º approved hash –ø–æ–¥–ø–∏—Å–∏ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', sortedOwners)

      sortedOwners.forEach(owner => {
        const approvedSignature = {
          signer: owner.toLowerCase(),
          data: `0x${owner.slice(2).padStart(64, '0')}${'0'.repeat(64)}01`,
          isContractSignature: false,
          staticPart: () => `0x${owner.slice(2).padStart(64, '0')}${'0'.repeat(64)}01`,
          dynamicPart: () => ''
        }

        safeTransaction.addSignature(approvedSignature)
        console.log(`üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ approved –ø–æ–¥–ø–∏—Å—å –¥–ª—è: ${owner}`)
      })
    }

    console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏...')
    console.log(`üìä EIP-712: ${existingSignatures}, Approved: ${approvedOwners.length}, –í—Å–µ–≥–æ: ${safeTransaction.signatures.size}`)

    const executeTxResponse = await safeSdk.executeTransaction(safeTransaction)

    console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ pre-approval –º–µ—Ö–∞–Ω–∏–∑–º!')
    console.log('üîó –•—ç—à –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', executeTxResponse.hash)

    return {
      hash: executeTxResponse.hash,
      response: executeTxResponse,
      eip712Signatures: existingSignatures,
      approvedHashSignatures: approvedOwners.length,
      totalSignatures: safeTransaction.signatures.size,
      threshold: threshold,
      executedBy: await this.network.signer.getAddress(),
      // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      preApprovedOwners: approvedOwners,
      usedSignatures: safeTransaction.signatures.size
    }
  }

}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe
export function createSafeConnectionForm(
  safeAddress: string,
  owners: string[],
  threshold: number,
  options?: {
    safeVersion?: string
    fallbackHandler?: string
  }
): SafeConnectionForm {
  return {
    safeAddress,
    owners,
    threshold,
    safeVersion: options?.safeVersion || '1.4.1',
    fallbackHandler: options?.fallbackHandler
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è Safe
export function createSafeCreationForm(
  owners: string[],
  threshold: number,
  options?: {
    safeVersion?: string
    fallbackHandler?: string
  }
): SafeCreationForm {
  return {
    owners,
    threshold,
    safeVersion: options?.safeVersion || '1.4.1',
    fallbackHandler: options?.fallbackHandler
  }
}

export default SafeOnChain
