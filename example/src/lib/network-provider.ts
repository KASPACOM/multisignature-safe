import { BrowserProvider, Eip1193Provider, ethers } from 'ethers'
import { 
  Network, 
  WalletState, 
  ConnectionStatus, 
  WalletEvent, 
  NetworkConfig,
  WALLET_TRANSITIONS 
} from './network-types'
import { getNetworkConfig } from './safe-common'

type Eth = Eip1193Provider & {
  on: (e: string, l: (...a: any[]) => void) => void;
  request?: (o: { method: string; params: any[] }) => Promise<any>;
};

declare let window: Window & { ethereum?: Eth };

let wallet: Eth;

export class NetworkProvider {
  private currentStatus: ConnectionStatus = { 
    state: WalletState.NoProvider,
    isLoading: false 
  }
  
  // –ö–æ–ª–ª–±–µ–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private statusCallbacks: Set<(status: ConnectionStatus) => void> = new Set()
  
  // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏
  private supportedNetworks: Map<bigint, NetworkConfig> = new Map()

  constructor() {
    if (typeof window !== 'undefined' && window.ethereum) {
      this.detectProvider()
    }
    this.initializeSupportedNetworks()
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
  private initializeSupportedNetworks() {
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–Ω—É —Å–µ—Ç—å –∏–∑ safe-common
    const networkConfig = getNetworkConfig()

    this.supportedNetworks.set(
      BigInt(networkConfig.chainId), 
      {
        chainId: BigInt(networkConfig.chainId),
        name: networkConfig.name,
        rpcUrl: networkConfig.rpcUrl,
        contracts: networkConfig.contracts
      }
    )
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  onStatusChange(callback: (status: ConnectionStatus) => void): () => void {
    this.statusCallbacks.add(callback)
    
    // –°—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º callback —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    callback(this.currentStatus)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.statusCallbacks.delete(callback)
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  getCurrentStatus(): ConnectionStatus {
    return { ...this.currentStatus }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
  getCurrentNetwork(): Network | null {
    return this.currentStatus.network || null
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  private processEvent(event: WalletEvent) {
    console.log('üîÑ NetworkProvider: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è:', event.type, event)
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', this.currentStatus.state)

    // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥
    const transition = WALLET_TRANSITIONS.find(t => 
      t.from === this.currentStatus.state && 
      t.trigger === event.type &&
      (!t.condition || t.condition(this.currentStatus, event))
    )

    if (!transition) {
      console.warn('‚ö†Ô∏è NetworkProvider: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è:', {
        from: this.currentStatus.state,
        trigger: event.type
      })
      return
    }

    console.log('üéØ NetworkProvider: –ü–µ—Ä–µ—Ö–æ–¥:', `${transition.from} ‚Üí ${transition.to}`)

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
    this.updateStatus(transition.to, event)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
  private updateStatus(newState: WalletState, event?: WalletEvent) {
    const previousState = this.currentStatus.state
    
    this.currentStatus = {
      ...this.currentStatus,
      state: newState,
      isLoading: this.isLoadingState(newState)
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—ã—Ç–∏—è
    if (event) {
      switch (event.type) {
        case 'CONNECTION_SUCCESS':
          if ('network' in event && 'account' in event) {
            this.currentStatus.network = event.network
            this.currentStatus.account = event.account
            this.currentStatus.error = undefined
          }
          break
          
        case 'CONNECTION_ERROR':
          if ('error' in event) {
            this.currentStatus.error = event.error
            this.currentStatus.network = undefined
            this.currentStatus.account = undefined
          }
          break
          
        case 'DISCONNECTED':
          this.currentStatus.network = undefined
          this.currentStatus.account = undefined
          this.currentStatus.error = undefined
          break
      }
    }

    console.log('‚úÖ NetworkProvider: –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', {
      previous: previousState,
      current: this.currentStatus.state,
      hasNetwork: !!this.currentStatus.network,
      hasAccount: !!this.currentStatus.account
    })

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    this.statusCallbacks.forEach(callback => {
      try {
        callback({ ...this.currentStatus })
      } catch (error) {
        console.error('‚ùå NetworkProvider: –û—à–∏–±–∫–∞ –≤ callback:', error)
      }
    })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–æ—á–Ω—ã–º
  private isLoadingState(state: WalletState): boolean {
    return [
      WalletState.AccountInitialization,
      WalletState.NetworkSwitching
    ].includes(state)
  }

  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  private detectProvider() {
    if (typeof window !== 'undefined' && window.ethereum) {
      wallet = window.ethereum as Eth;
      console.log('üîç NetworkProvider: MetaMask –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
      
      const provider = new ethers.BrowserProvider(wallet)
      this.processEvent({ type: 'PROVIDER_DETECTED', provider })
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è MetaMask
      this.setupEventListeners()
    } else {
      console.log('‚ùå NetworkProvider: MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω')
      this.updateStatus(WalletState.NoProvider)
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π MetaMask
  private setupEventListeners() {
    if (!wallet) return

    // –°–º–µ–Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    wallet.on('accountsChanged', (accounts: string[]) => {
      console.log('üë§ NetworkProvider: –ê–∫–∫–∞—É–Ω—Ç—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:', accounts)
      
      if (accounts.length === 0) {
        this.processEvent({ type: 'DISCONNECTED' })
      } else {
        this.processEvent({ type: 'ACCOUNT_CHANGED', account: accounts[0] })
        // –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞ —Å—Ä–∞–∑—É –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        this.refresh()
      }
    })

    // –°–º–µ–Ω–∞ —Å–µ—Ç–∏
    wallet.on('chainChanged', (chainIdHex: string) => {
      const chainId = BigInt(chainIdHex)
      console.log('üåê NetworkProvider: –°–µ—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å:', chainId.toString())
      
      this.processEvent({ type: 'NETWORK_CHANGED', chainId })
      // –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã —Å–µ—Ç–∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      this.refresh()
    })

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    wallet.on('disconnect', () => {
      console.log('üîå NetworkProvider: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ')
      this.processEvent({ type: 'DISCONNECTED' })
    })
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É
  async connect(): Promise<Network> {
    console.log('üöÄ NetworkProvider: –ó–∞–ø—Ä–æ—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')
    
    this.processEvent({ type: 'CONNECT_REQUESTED' })
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º wallet –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω
      if (typeof window !== 'undefined' && window.ethereum) {
        wallet = window.ethereum as Eth;
      }
      
      if (!wallet) {
        throw new Error('MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
      }

      // –°–æ–∑–¥–∞–µ–º provider –∏ –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
      const provider = new ethers.BrowserProvider(wallet)
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º
      await provider.send('eth_requestAccounts', [])
      
      // –ü–æ–ª—É—á–∞–µ–º signer –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
      const signer = await provider.getSigner()
      const network = await provider.getNetwork()
      const account = await signer.getAddress()
      
      console.log('‚úÖ NetworkProvider: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', {
        chainId: network.chainId.toString(),
        account
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å
      if (!this.supportedNetworks.has(network.chainId)) {
        throw new Error(`–°–µ—Ç—å ${network.chainId} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`)
      }

      // –°–æ–∑–¥–∞–µ–º Network –æ–±—ä–µ–∫—Ç
      const networkInstance: Network = {
        id: network.chainId,
        provider: provider,
        signer,
        eip1193Provider: wallet  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π window.ethereum
      }

      this.processEvent({ 
        type: 'CONNECTION_SUCCESS', 
        network: networkInstance,
        account 
      })

      return networkInstance

    } catch (error: any) {
      console.error('‚ùå NetworkProvider: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
      
      this.processEvent({ 
        type: 'CONNECTION_ERROR', 
        error: error.message || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ—à–µ–ª—å–∫—É'
      })
      
      throw error
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
  async refresh(): Promise<Network | null> {
    console.log('üîÑ NetworkProvider: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...')
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º wallet –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
      if (typeof window !== 'undefined' && window.ethereum) {
        wallet = window.ethereum as Eth;
      }
      
      if (!wallet) {
        this.processEvent({ type: 'DISCONNECTED' })
        return null
      }

      const provider: BrowserProvider = new ethers.BrowserProvider(wallet)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã
      const accounts = await provider.listAccounts()
      if (accounts.length === 0) {
        this.processEvent({ type: 'DISCONNECTED' })
        return null
      }

      const signer = await provider.getSigner()
      const network = await provider.getNetwork()
      const account = await signer.getAddress()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–µ—Ç—å
      if (!this.supportedNetworks.has(network.chainId)) {
        this.processEvent({ 
          type: 'CONNECTION_ERROR',
          error: `–°–µ—Ç—å ${network.chainId} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è` 
        })
        return null
      }

      const networkInstance: Network = {
        id: network.chainId,
        provider: provider,
        signer,
        eip1193Provider: wallet  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π window.ethereum
      }

      this.processEvent({ 
        type: 'CONNECTION_SUCCESS',
        network: networkInstance,
        account 
      })

      return networkInstance

    } catch (error: any) {
      console.error('‚ùå NetworkProvider: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error)
      
      this.processEvent({ 
        type: 'CONNECTION_ERROR',
        error: error.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
      })
      
      return null
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–æ—à–µ–ª—å–∫–∞
  disconnect() {
    console.log('üîå NetworkProvider: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...')
    this.processEvent({ type: 'DISCONNECTED' })
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  isConnected(): boolean {
    return this.currentStatus.state === WalletState.Connected && 
           !!this.currentStatus.network
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ç–∏ –ø–æ ID
  getNetworkConfig(chainId: bigint): NetworkConfig | undefined {
    return this.supportedNetworks.get(chainId)
  }

  // –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é —Å–µ—Ç—å
  addSupportedNetwork(config: NetworkConfig) {
    this.supportedNetworks.set(config.chainId, config)
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å–µ—Ç–µ–π
  getSupportedNetworks(): NetworkConfig[] {
    return Array.from(this.supportedNetworks.values())
  }
}

// Singleton instance
export const networkProvider = new NetworkProvider()
