import { ethers } from 'ethers'
import SafeApiKit from '@safe-global/api-kit'
import {
  SafeTransaction
} from '@safe-global/types-kit'
import {
  ProposeTransactionProps,
  SafeMultisigTransactionListResponse,
} from '@safe-global/api-kit'
import type {
  SafeMultisigTransactionResponse,
  SafeMultisigConfirmationResponse,
  SignatureType,
  DataDecoded
} from '@safe-global/types-kit'

import { getNetworkConfig } from './safe-common'


// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç getAllTransactions –∏–∑ API Kit
export type UserProposal = SafeMultisigTransactionListResponse['results'][0]

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export interface UserProposalsFilter {
  userAddress: string
  safeAddress?: string
  executed?: boolean
  trusted?: boolean
  limit?: number
  offset?: number
  requiresUserSignature?: boolean // –¢–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  sortBy?: 'submissionDate' | 'nonce' | 'modified'
  sortOrder?: 'asc' | 'desc'
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏  
export interface UniversalOperationResult {
  transactionHash: string
  safeTransaction: any | null // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö
  encodedData: string
  transactionDetails: {
    to: string
    value: string
    data: string
    nonce: number
  }
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Safe Transaction Service (STS)
export class SafeOffChain {
  private apiKit: SafeApiKit | null = null
  private networkConfig = getNetworkConfig()

  constructor() {
    this.initializeApiKit()
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Kit
  private async initializeApiKit() {
    try {
      if (!this.networkConfig.stsUrl) {
        console.warn('STS URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
        return
      }

      this.apiKit = new SafeApiKit({
        txServiceUrl: this.networkConfig.stsUrl,
        chainId: BigInt(this.networkConfig.chainId)
      })

      console.log('üîß SafeApiKit –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:')
      console.log('  üì° TX Service URL:', this.networkConfig.stsUrl)
      console.log('  üîó Chain ID:', this.networkConfig.chainId)

      console.log('SafeApiKit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è STS:', this.networkConfig.stsUrl)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SafeApiKit:', error)
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ STS
  isSTSAvailable(): boolean {
    return this.apiKit !== null
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Safe –∏–∑ STS
  async getSafeInfo(safeAddress: string) {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    try {
      const safeInfo = await this.apiKit.getSafeInfo(safeAddress)
      return {
        address: safeInfo.address,
        nonce: parseInt(safeInfo.nonce),
        threshold: safeInfo.threshold,
        owners: safeInfo.owners,
        singleton: safeInfo.singleton,
        modules: safeInfo.modules,
        fallbackHandler: safeInfo.fallbackHandler,
        guard: safeInfo.guard,
        version: safeInfo.version
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Safe:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ STS
  async getTransaction(safeTxHash: string) {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    try {
      return await this.apiKit.getTransaction(safeTxHash)
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  async getPendingTransactions(safeAddress: string) {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    try {
      return (await this.apiKit.getPendingTransactions(safeAddress)).results
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)

      // –ï—Å–ª–∏ Safe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ STS (–æ–±—ã—á–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö Safe)
      if (error.status === 404 || error.message?.includes('Not Found') || error.message?.includes('404')) {
        console.log('‚ö†Ô∏è Safe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ STS (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω). –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.')
        return []
      }

      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π Safe
  async getAllTransactions(
    safeAddress: string,
    options?: {
      executed?: boolean
      queued?: boolean
      trusted?: boolean
      limit?: number
      offset?: number
    }
  ): Promise<SafeMultisigTransactionListResponse> {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    try {
      const response = await this.apiKit.getMultisigTransactions(safeAddress)
      return response
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
      throw error
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–ª–∞–¥–µ–ª—å—Ü–∞—Ö Safe
  async getSafeOwners(safeAddress: string): Promise<string[]> {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    try {
      const safeInfo = await this.getSafeInfo(safeAddress)
      return safeInfo.owners
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:', error)
      throw error
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥—Ä–µ—Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Safe
  async isOwner(safeAddress: string, ownerAddress: string): Promise<boolean> {
    try {
      const owners = await this.getSafeOwners(safeAddress)
      return owners.map(addr => addr.toLowerCase()).includes(ownerAddress.toLowerCase())
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', error)
      return false
    }
  }

  // ===============================================
  // –ú–ï–¢–û–î–´ –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ò –û–¢–ü–†–ê–í–ö–ò –û–ü–ï–†–ê–¶–ò–ô –í STS  
  // ===============================================

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ STS API Kit (–∞–Ω–∞–ª–æ–≥ approve hash –≤ –±–ª–æ–∫—á–µ–π–Ω–µ)
  async confirmTransaction(
    safeTxHash: string,
    signature: string
  ): Promise<void> {
    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS —á–µ—Ä–µ–∑ API Kit:', safeTxHash)
    console.log('üìù –ü–æ–¥–ø–∏—Å—å:', signature.slice(0, 20) + '...')

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API Kit –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –ø–æ–¥–ø–∏—Å—å—é
      await this.apiKit.confirmTransaction(safeTxHash, signature)

      console.log('üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤ STS!')

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      throw error
    }
  }

  // –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Safe + –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ STS
  async proposeUniversalResult(
    safeAddress: string,
    universalResult: UniversalOperationResult,
    senderAddress: string,
    origin?: string
  ): Promise<void> {
    console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú proposeUniversalResult –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', universalResult.transactionHash)
    console.log('   üìç Safe –∞–¥—Ä–µ—Å:', safeAddress)
    console.log('   üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:', senderAddress)
    console.log('   üè∑Ô∏è –ò—Å—Ç–æ—á–Ω–∏–∫:', origin || 'Universal Operation')

    if (!this.apiKit) {
      throw new Error('STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const signature = universalResult.safeTransaction.signatures?.get(senderAddress.toLowerCase())
    if (!signature) {
      console.log('‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞:', senderAddress.toLowerCase())
      console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏:', Array.from(universalResult.safeTransaction.signatures.keys()))
      throw new Error('–ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    }

    const signatureData = typeof signature === 'object' && signature && 'data' in signature
      ? String(signature.data)
      : String(signature)

    console.log('üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é:')
    console.log('  üéØ –•–µ—à:', universalResult.transactionHash)
    console.log('  üìç –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', universalResult.transactionDetails.to)
    console.log('  üí∞ –ó–Ω–∞—á–µ–Ω–∏–µ:', universalResult.transactionDetails.value)
    console.log('  üìù Nonce:', universalResult.transactionDetails.nonce)

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ Safe –≤ STS
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é Safe –≤ STS:', safeAddress)
      await this.getSafeInfo(safeAddress)
      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS (—ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç Safe –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const proposeTransactionProps: ProposeTransactionProps = {
        safeAddress,
        safeTransactionData: universalResult.safeTransaction.data,
        safeTxHash: universalResult.transactionHash,
        senderAddress,
        senderSignature: signatureData,
        origin: origin || 'Universal Operation'
      }

      console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª –≤ STS —á–µ—Ä–µ–∑ API Kit...')
      await this.apiKit.proposeTransaction(proposeTransactionProps)
      console.log('üéâ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ STS!')
      console.log('   üìç Safe –∞–¥—Ä–µ—Å:', safeAddress)
      console.log('   üîó –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', universalResult.transactionHash)

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error)
      console.error('   üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error)
      throw error
    }
  }

  // ===============================================
  // –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–†–û–ü–û–ó–ê–õ–ê–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
  // ===============================================

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserProposals(filter: UserProposalsFilter): Promise<UserProposal[]> {
    console.log('üì• –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', filter.userAddress)

    const proposals: UserProposal[] = []

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Safe, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
    const userSafes = filter.safeAddress ? [filter.safeAddress] : await this.getUserSafes(filter.userAddress)

    for (const safeAddress of userSafes) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Safe: ${safeAddress}`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–≥–æ Safe
        const isUserOwner = await this.isOwner(safeAddress, filter.userAddress)
        if (!isUserOwner) {
          console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${filter.userAddress} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Safe ${safeAddress}`)
          continue
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ Safe
        const safeProposals = await this.getSTSProposalsOnly(safeAddress)
        proposals.push(...safeProposals)

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –¥–ª—è Safe ${safeAddress}:`, error)
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö Safe
      }
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
    return this.filterAndSortProposals(proposals, filter)
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserProposalsStats(userAddress: string): Promise<{
    total: number
    pending: number // —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    executable: number // –≥–æ—Ç–æ–≤—ã –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é
    executed: number // —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
    byStatus: {
      needsMySignature: number
      waitingForOthers: number
      readyToExecute: number
      executed: number
    }
  }> {
    console.log('üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –¥–ª—è:', userAddress)

    try {
      const allProposals = await this.getUserProposals({ userAddress })

      const stats = {
        total: allProposals.length,
        pending: 0,
        executable: 0,
        executed: 0,
        byStatus: {
          needsMySignature: 0,
          waitingForOthers: 0,
          readyToExecute: 0,
          executed: 0
        }
      }

      allProposals.forEach(proposal => {
        if (proposal.isExecuted) {
          stats.executed++
          stats.byStatus.executed++
        } else {
          const userHasSigned = proposal.confirmations?.some(
            (conf: SafeMultisigConfirmationResponse) => conf.owner.toLowerCase() === userAddress.toLowerCase()
          ) || false
          const hasEnoughSignatures = (proposal.confirmations?.length || 0) >= proposal.confirmationsRequired

          if (!userHasSigned) {
            stats.pending++
            stats.byStatus.needsMySignature++
          } else if (hasEnoughSignatures) {
            stats.executable++
            stats.byStatus.readyToExecute++
          } else {
            stats.byStatus.waitingForOthers++
          }
        }
      })

      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤:', stats)
      return stats

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error)
      return {
        total: 0,
        pending: 0,
        executable: 0,
        executed: 0,
        byStatus: {
          needsMySignature: 0,
          waitingForOthers: 0,
          readyToExecute: 0,
          executed: 0
        }
      }
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ Safe, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
  private async getUserSafes(userAddress: string): Promise<string[]> {
    if (!this.apiKit) {
      console.warn('‚ö†Ô∏è STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ Safe')
      return []
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º STS API –¥–ª—è –ø–æ–∏—Å–∫–∞ Safe –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
      const userSafes = await this.apiKit.getSafesByOwner(userAddress)
      return userSafes.safes || []
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Safe –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return []
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserSafesList(userAddress: string): Promise<string[]> {
    console.log('üìã –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userAddress)
    
    try {
      const safes = await this.getUserSafes(userAddress)
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–æ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', safes.length)
      return safes
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Safe:', error)
      return []
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤
  async getUserSafesWithoutProposals(userAddress: string): Promise<string[]> {
    console.log('üîç –ü–æ–ª—É—á–∞–µ–º Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –¥–ª—è:', userAddress)
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allSafes = await this.getUserSafesList(userAddress)
      console.log('üìã –í—Å–µ–≥–æ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', allSafes.length)
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allProposals = await this.getUserProposals({ userAddress })
      console.log('üìã –í—Å–µ–≥–æ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤:', allProposals.length)
      
      // –°–æ–∑–¥–∞–µ–º Set –∞–¥—Ä–µ—Å–æ–≤ Safe —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–ø–æ–∑–∞–ª–∞–º–∏
      const safesWithProposals = new Set(
        allProposals
          .filter(proposal => !proposal.isExecuted) // –¢–æ–ª—å–∫–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ–∑–∞–ª—ã
          .map(proposal => proposal.safe.toLowerCase())
      )
      
      console.log('üìã Safe —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø—Ä–æ–ø–æ–∑–∞–ª–∞–º–∏:', safesWithProposals.size)
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–ø–æ–∑–∞–ª—ã
      const safesWithoutProposals = allSafes.filter(
        safeAddress => !safesWithProposals.has(safeAddress.toLowerCase())
      )
      
      console.log('‚úÖ Safe –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤:', safesWithoutProposals.length)
      return safesWithoutProposals
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Safe –±–µ–∑ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤:', error)
      return []
    }
  }

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤
  private filterAndSortProposals(proposals: UserProposal[], filter: UserProposalsFilter): UserProposal[] {
    let filtered = [...proposals]

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–¥–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (filter.requiresUserSignature) {
      filtered = filtered.filter(proposal => {
        if (proposal.isExecuted) return false

        const userHasSigned = proposal.confirmations?.some(
          (conf: SafeMultisigConfirmationResponse) => conf.owner.toLowerCase() === filter.userAddress.toLowerCase()
        ) || false
        return !userHasSigned
      })
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const sortBy = filter.sortBy || 'submissionDate'
    const sortOrder = filter.sortOrder || 'desc'

    filtered.sort((a, b) => {
      let comparison = 0

      switch (sortBy) {
        case 'submissionDate':
          comparison = new Date(a.submissionDate).getTime() - new Date(b.submissionDate).getTime()
          break
        case 'nonce':
          comparison = Number(a.nonce) - Number(b.nonce)
          break
        case 'modified':
          comparison = new Date(a.modified).getTime() - new Date(b.modified).getTime()
          break
      }

      return sortOrder === 'asc' ? comparison : -comparison
    })

    return filtered
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ - —Ç–æ–ª—å–∫–æ –∏–∑ STS (—É–±–∏—Ä–∞–µ–º fallback –Ω–∞ localStorage)
  private async getSTSProposalsOnly(safeAddress: string): Promise<UserProposal[]> {
    if (!this.apiKit) {
      console.log('‚ö†Ô∏è STS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø–æ–∑–∞–ª—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return []
    }

    try {
      const response = await this.getAllTransactions(safeAddress)

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º SafeMultisigTransactionResponse –Ω–∞–ø—Ä—è–º—É—é
      return response.results

    } catch (error: any) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –∏–∑ STS –¥–ª—è Safe ${safeAddress}:`, error)

      // –ï—Å–ª–∏ Safe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ STS (404), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
      if (error.status === 404 || error.message?.includes('Not Found')) {
        console.log('‚ö†Ô∏è Safe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ STS. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.')
        return []
      }

      throw error
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
export default SafeOffChain
