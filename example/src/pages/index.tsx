import React, { useState, useEffect } from 'react'
import { ethers } from 'ethers'
import { SafeTransaction } from '@safe-global/types-kit'

import SafeOnChain, {
  UniversalFunctionCall,
  SafeCreationForm,
  SafeConnectionForm as SafeConnectionFormData
} from '../lib/onchain'
import { SafeManagement, ProposalsPage } from '../components'
import { ContractSelector } from '../components/ContractSelector'
import { FunctionSelector } from '../components/FunctionSelector'
import { ParameterForm } from '../components/ParameterForm'
import { ContractDropdown } from '../components/ContractDropdown'
import { FunctionDropdown } from '../components/FunctionDropdown'
import { ContractInfo } from '../components/TokenInfo'
import SafeOffChain, { UniversalOperationResult } from '../lib/offchain'
import {
  formatAddress
} from '../lib/safe-common'
import { NETWORK_COLORS, getSupportedNetworks } from '../lib/constants'
import { Network, WalletState, ConnectionStatus } from '../lib/network-types'
import { networkProvider } from '../lib/network-provider'
import { ContractABI, ParsedFunction, FunctionFormData } from '../lib/contract-types'
import { contractRegistry } from '../lib/contract-registry'

interface SafeInfo {
  address: string
  owners: string[]
  threshold: number
  balance: string
  nonce: number
}

interface SignatureResult {
  signature: string
  r: string
  s: string
  v: number
  recoveryId: number
  encodedPacked: string
}

interface UniversalTransactionForm {
  contractAddress: string
  functionSignature: string
  functionParams: string[]
  ethValue: string
}

// Enum –¥–ª—è —Å–µ–∫—Ü–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
enum AppSection {
  PROPOSALS = 'proposals',
  CREATE_PROPOSAL = 'main'
}

const SafeMultisigApp: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Network –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [network, setNetwork] = useState<Network | null>(null)
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>({
    state: WalletState.Disconnected,
    isLoading: false
  })
  const [userAddress, setUserAddress] = useState<string>('')

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞–º–∏
  const [currentSection, setCurrentSection] = useState<AppSection>(AppSection.PROPOSALS)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Safe
  const [safeInfo, setSafeInfo] = useState<SafeInfo | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Safe –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [showSafeManagement, setShowSafeManagement] = useState(false)
  const [predictedSafeAddress, setPredictedSafeAddress] = useState<string>('')

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const [universalForm, setUniversalForm] = useState<UniversalTransactionForm>({
    contractAddress: '',
    functionSignature: '',
    functionParams: [''],
    ethValue: '0'
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ UI —Å ABI
  const [selectedContract, setSelectedContract] = useState<ContractABI | null>(null)
  const [selectedFunction, setSelectedFunction] = useState<ParsedFunction | null>(null)
  const [structuredFormData, setStructuredFormData] = useState<FunctionFormData>({
    parameters: {},
    ethValue: '0'
  })
  const [useStructuredMode, setUseStructuredMode] = useState<boolean>(true)

  // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [universalResult, setUniversalResult] = useState<UniversalOperationResult | null>(null)

  // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–ø–∏—Å–∏ —Ö–µ—à–∞
  const [signatureResult, setSignatureResult] = useState<SignatureResult | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const [contractsLoading, setContractsLoading] = useState<boolean>(false)
  const [contractsError, setContractsError] = useState<string | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState<{ [key: string]: boolean }>({})
  const [error, setError] = useState<string>('')
  const [success, setSuccess] = useState<string>('')

  // –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤  
  const [safeOnChain, setSafeOnChain] = useState<SafeOnChain | null>(null)
  const [safeOffChain] = useState(() => new SafeOffChain())

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è NetworkProvider
    const unsubscribe = networkProvider.onStatusChange((status: ConnectionStatus) => {
      console.log('üîÑ React: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', status)

      setConnectionStatus(status)

      if (status.network) {
        setNetwork(status.network)
      } else {
        setNetwork(null)
      }

      if (status.account) {
        setUserAddress(status.account)
      } else {
        setUserAddress('')
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å–µ–∫—Ü–∏—é –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
        setCurrentSection(AppSection.CREATE_PROPOSAL)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    initializeApp()

    return () => {
      unsubscribe()
    }
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ safeOnChain –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Network
  useEffect(() => {
    if (network) {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SafeOnChain –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Network')

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ContractRegistry –¥–ª—è –Ω–æ–≤–æ–π —Å–µ—Ç–∏
      console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ContractRegistry –¥–ª—è chainId:', network.id)
      contractRegistry.initializeForChain(network.id)
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      loadContractsForNetwork()

      // –ï—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω Safe, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º Network
      const currentSafeAddress = safeInfo?.address
      const currentOwners = safeInfo?.owners
      const currentThreshold = safeInfo?.threshold

      const newSafeOnChain = new SafeOnChain(network)
      setSafeOnChain(newSafeOnChain)

      // –ï—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π Safe, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      if (currentSafeAddress && currentOwners && currentThreshold) {
        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe:', currentSafeAddress)

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        setTimeout(async () => {
          try {
            await newSafeOnChain.connectToSafeWithForm({
              safeAddress: currentSafeAddress,
              owners: currentOwners,
              threshold: currentThreshold
            })
            console.log('‚úÖ Safe –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω')
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Safe:', error)
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Safe –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setSafeInfo(null)
            if (currentSection === AppSection.CREATE_PROPOSAL) {
            setShowSafeManagement(true)
            }
            showError('Safe –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ —Å–º–µ–Ω—ã –∫–æ–Ω–Ω–µ–∫—Ç–∞. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.')
          }
        }, 100)
      }
    } else {
      setSafeOnChain(null)
      // –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ Network –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Safe
      setSafeInfo(null)
      if (currentSection === AppSection.CREATE_PROPOSAL) {
      setShowSafeManagement(true)
      }
    }
  }, [network])

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Safe Management –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–∞"
  useEffect(() => {
    if (currentSection === AppSection.CREATE_PROPOSAL && !safeInfo) {
      setShowSafeManagement(true)
    }
  }, [currentSection, safeInfo])

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–∞"
  useEffect(() => {
    if (currentSection === AppSection.CREATE_PROPOSAL) {
      // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Safe
      if (!safeInfo) {
        setUniversalForm({
          contractAddress: '',
          functionSignature: '',
          functionParams: [''],
          ethValue: '0'
        })
        setUniversalResult(null)
        setSignatureResult(null)
        
        // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        setSelectedContract(null)
        setSelectedFunction(null)
        setStructuredFormData({
          parameters: {},
          ethValue: '0'
        })
      }
    }
  }, [currentSection, safeInfo])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const initializeApp = async () => {
    console.log('üöÄ React: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...')

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      const currentNetwork = await networkProvider.refresh()
      console.log('‚úÖ React: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        hasNetwork: !!currentNetwork,
        networkId: currentNetwork?.id?.toString()
      })
    } catch (error) {
      console.error('‚ùå React: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ—à–µ–ª—å–∫–∞ (—Ç–µ–ø–µ—Ä—å —á–µ—Ä–µ–∑ NetworkProvider)
  // –ù–µ –Ω—É–∂–Ω—ã - NetworkProvider –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const setLoadingState = (key: string, value: boolean) => {
    setLoading(prev => ({ ...prev, [key]: value }))
  }

  const showError = (message: string) => {
    setError(message)
    setSuccess('')
    setTimeout(() => setError(''), 5000)
  }

  const showSuccess = (message: string) => {
    setSuccess(message)
    setError('')
    setTimeout(() => setSuccess(''), 5000)
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
  const loadContractsForNetwork = async () => {
    setContractsLoading(true)
    setContractsError(null)

    try {
      console.log('üì¶ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏–∑ API...')
      await contractRegistry.loadContracts({
        limit: 100, // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
        trusted: true // –¢–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
      })
      console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:', error)
      setContractsError(error.message)
      showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: ${error.message}`)
    } finally {
      setContractsLoading(false)
    }
  }

  // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ NetworkProvider
  const handleConnectWallet = async () => {
    console.log('üöÄ React: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞...')

    try {
      const connectedNetwork = await networkProvider.connect()
      showSuccess(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ! –°–µ—Ç—å: ${connectedNetwork.id.toString()}`)
    } catch (error) {
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é Safe —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const handleNavigateToSafeCreation = async (safeAddress: string, owners: string[], threshold: number) => {
    console.log('üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é Safe —Å –¥–∞–Ω–Ω—ã–º–∏:', { safeAddress, owners, threshold })
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–∞"
    setCurrentSection(AppSection.CREATE_PROPOSAL)
    
    // –°—Ä–∞–∑—É –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Safe
    const connectionFormData: SafeConnectionFormData = {
      safeAddress,
      owners,
      threshold,
      safeVersion: '1.4.1',
      fallbackHandler: ''
    }
    
    showSuccess(`–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Safe ${formatAddress(safeAddress)}...`)
    await handleConnectToSafe(connectionFormData)
  }

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe
  const handleConnectToSafe = async (formData: SafeConnectionFormData) => {
    if (!safeOnChain || !network) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('createSafe', true)
    try {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe —Å —Ñ–æ—Ä–º–æ–π:', formData)

      await safeOnChain.connectToSafeWithForm(formData)

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe
      const safeData = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: safeData.address,
        owners: safeData.owners,
        threshold: safeData.threshold,
        balance: safeData.balance,
        nonce: safeData.nonce
      })

      // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setShowSafeManagement(false)

      showSuccess(`‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ Safe ${formatAddress(safeData.address)}`)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe')
    } finally {
      setLoadingState('createSafe', false)
    }
  }

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ Safe —Å —Ñ–æ—Ä–º–æ–π
  const handleCreateSafeWithForm = async (formData: SafeCreationForm) => {
    if (!safeOnChain || !network) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('createSafe', true)
    try {
      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Safe —Å —Ñ–æ—Ä–º–æ–π:', formData)

      await safeOnChain.createSafeWithForm(formData)

      const safeAddress = safeOnChain.currentSafeAddress
      if (!safeAddress) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Safe')
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe
      const safeData = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: safeData.address,
        owners: safeData.owners,
        threshold: safeData.threshold,
        balance: safeData.balance,
        nonce: safeData.nonce
      })

      // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setShowSafeManagement(false)

      showSuccess(`Safe —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${formatAddress(safeAddress)}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Safe:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Safe')
    }
    setLoadingState('createSafe', false)
  }

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ Safe
  const handlePredictSafeAddress = async (formData: SafeCreationForm) => {
    if (!safeOnChain) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('predictAddress', true)
    try {
      console.log('üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å Safe –ø–æ —Ñ–æ—Ä–º–µ:', formData)

      const predictedAddress = await safeOnChain.getSafeAddressByForm(formData)
      setPredictedSafeAddress(predictedAddress)

      showSuccess(`–ê–¥—Ä–µ—Å Safe –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω: ${formatAddress(predictedAddress)}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞')
    }
    setLoadingState('predictAddress', false)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ —Å ABI)
  const handleCreateStructuredHash = async () => {
    if (!safeOnChain || !safeInfo) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    if (!selectedContract || !selectedFunction) {
      showError('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏ —Ñ—É–Ω–∫—Ü–∏—é')
      return
    }

    setLoadingState('universalHash', true)
    setUniversalResult(null)

    try {
      console.log('üöÄ –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...')
      
      const result = await safeOnChain.createStructuredTransactionHash(
        selectedContract.address,
        selectedFunction,
        structuredFormData
      )

      setUniversalResult(result)
      showSuccess('–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`)
    } finally {
      setLoadingState('universalHash', false)
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleCreateUniversalHash = async () => {
    if (!safeOnChain || !safeInfo) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setLoadingState('universalHash', true)
    setUniversalResult(null)

    try {
      if (!universalForm.contractAddress || !universalForm.functionSignature) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏')
      }

      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
      const paramTypes = universalForm.functionSignature
        .split('(')[1]
        ?.split(')')[0]
        ?.split(',')
        ?.map(p => p.trim())
        ?.filter(p => p.length > 0) || []

      const paramValues = universalForm.functionParams.slice(0, paramTypes.length)

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
      const convertedParams = paramValues.map((value, index) => {
        const paramType = paramTypes[index]
        if (!paramType) return value

        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanValue = value.trim()
        if (!cleanValue) return value

        try {
          if (paramType.includes('uint') || paramType.includes('int')) {
            // –î–ª—è —á–∏—Å–µ–ª - –ø–∞—Ä—Å–∏–º –∫–∞–∫ BigInt
            if (cleanValue.includes('.')) {
              // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º parseUnits
              return ethers.parseUnits(cleanValue, 18)
            } else {
              // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
              return ethers.parseUnits(cleanValue, 0)
            }
          }
          if (paramType === 'address') {
            return ethers.getAddress(cleanValue) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
          }
          if (paramType === 'bool') {
            return cleanValue.toLowerCase() === 'true'
          }
          // –î–ª—è string, bytes –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          return cleanValue
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${index}: ${error}`)
          return cleanValue
        }
      })

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ETH –≤ wei (BigInt)
      let valueInWei: bigint = 0n
      if (universalForm.ethValue && universalForm.ethValue !== '0' && universalForm.ethValue !== '') {
        try {
          valueInWei = ethers.parseEther(universalForm.ethValue.toString())
          console.log('üí∞ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ ETH –≤ wei (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º):', universalForm.ethValue, '‚Üí', valueInWei.toString())
        } catch (parseError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ETH value (—Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º):', universalForm.ethValue, parseError)
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ETH value: ${universalForm.ethValue}`)
        }
      }

      const functionCall: UniversalFunctionCall = {
        contractAddress: universalForm.contractAddress,
        functionSignature: universalForm.functionSignature,
        functionParams: convertedParams,
        value: valueInWei
      }

      console.log('üéØ –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è:', functionCall)

      // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ SafeOnChain 
      const result = await safeOnChain.createUniversalTransactionHash(
        functionCall
      )

      // –£–ë–ò–†–ê–ï–ú –æ—Ç–ø—Ä–∞–≤–∫—É –≤ STS –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ - –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è

      setUniversalResult({
        transactionHash: result.transactionHash,
        safeTransaction: result.safeTransaction,
        encodedData: result.encodedData,
        transactionDetails: result.transactionDetails
      })

      showSuccess(`‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω! 
        –•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: ${result.transactionHash}
        Nonce: ${result.transactionDetails.nonce}
        
        ‚úçÔ∏è –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ö–µ—à EIP-712" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ STS.`)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞:', error)
      showError(`–û—à–∏–±–∫–∞: ${error.message}`)
    }

    setLoadingState('universalHash', false)
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –≤ STS
  const sendSignatureToSTS = async (transactionHash: string, userAddress: string) => {
    if (!safeOffChain || !safeInfo) {
      console.log('‚ö†Ô∏è SafeOffChain –∏–ª–∏ SafeInfo –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return
    }

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ STS
    try {
      await safeOffChain.getTransaction(transactionHash)
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ STS. –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø—Ä–æ–ø–æ–∑–∞–ª—ã"')

      setTimeout(() => {
        console.log('üìã –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø—Ä–æ–ø–æ–∑–∞–ª—ã" - —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        setCurrentSection(AppSection.PROPOSALS)
      }, 1500)
    } catch (error: any) {
      // –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404 –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–ø–æ–∑–∞–ª
      if (error?.response?.status === 404 ||
        error?.status === 404 ||
        error?.message?.includes('No MultisigTransaction matches') ||
        error?.message?.includes('Transaction not found') ||
        error?.message?.includes('404') ||
        error?.message?.includes('Not Found')) {
        console.log('üìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –µ—â–µ –Ω–µ—Ç –≤ STS, —Å–æ–∑–¥–∞—ë–º –ø—Ä–æ–ø–æ–∑–∞–ª...')
        await proposeUniversalResult(userAddress)
        return
      }
      // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
      throw error
    }
  }

  const proposeUniversalResult = async (userAddress: string) => {
    if (!safeOffChain || !safeInfo) {
      console.log('‚ö†Ô∏è SafeOffChain –∏–ª–∏ SafeInfo –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã')
      return
    }

    try {
      await safeOffChain.proposeUniversalResult(
        safeInfo.address,
        universalResult!,
        userAddress,
        'Universal Function Call'
      )

      showSuccess('‚úÖ –ü—Ä–æ–ø–æ–∑–∞–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!')

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø–æ–∑–∞–ª–∞
      setUniversalForm({
        contractAddress: '',
        functionSignature: '',
        functionParams: [''],
        ethValue: '0'
      })
      setUniversalResult(null)
      setSignatureResult(null)
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setSelectedContract(null)
      setSelectedFunction(null)
      setStructuredFormData({
        parameters: {},
        ethValue: '0'
      })

      setTimeout(() => {
        console.log('üìã –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø—Ä–æ–ø–æ–∑–∞–ª—ã" - –ø—Ä–æ–ø–æ–∑–∞–ª —Å–æ–∑–¥–∞–Ω')
        setCurrentSection(AppSection.PROPOSALS)
      }, 1500)
    } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø–æ–∑–∞–ª–∞:', error)
        showError(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–ø–æ–∑–∞–ª–∞: ${error.message}`)
    }
  }

  // –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleSignTransactionHash = async () => {
      if (!universalResult || !network || !safeOnChain || !safeInfo) {
        showError('–ù–µ—Ç —Ö–µ—à–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏, –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ Safe Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
        return
      }

      setLoadingState('signHash', true)
      setSignatureResult(null)

      try {
        console.log('üñãÔ∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Protocol Kit (EIP-712):', universalResult.transactionHash)

        // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userAddress = await network.signer.getAddress()
        console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥—Ä–µ—Å:', userAddress)
        console.log('üîç –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', universalResult.transactionHash)

        // 2. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Safe SDK
        const safeSdk = safeOnChain.getSafeSdk()
        const safeTransaction = universalResult.safeTransaction

        if (!safeTransaction) {
          throw new Error('SafeTransaction –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ')
        }

        console.log('üìù –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Safe SDK (EIP-712)...')
        const signedSafeTransaction = await safeSdk.signTransaction(safeTransaction)
        console.log('üìä –ü–æ–¥–ø–∏—Å–µ–π –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', signedSafeTransaction.signatures.size)

        // 3. –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userSignature = signedSafeTransaction.signatures.get(userAddress) ||
          signedSafeTransaction.signatures.get(userAddress.toLowerCase()) ||
          signedSafeTransaction.signatures.get(ethers.getAddress(userAddress))

        if (!userSignature) {
          const availableKeys = Array.from(signedSafeTransaction.signatures.keys())
          console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–µ–π:', availableKeys)
          throw new Error(`–ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${userAddress}. –î–æ—Å—Ç—É–ø–Ω—ã–µ: ${availableKeys.join(', ')}`)
        }

        console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')

        // 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–∏
        universalResult.safeTransaction = signedSafeTransaction

        const sig = ethers.Signature.from(userSignature.data)
        const newSignatureResult: SignatureResult = {
          signature: userSignature.data,
          r: sig.r,
          s: sig.s,
          v: sig.v,
          recoveryId: sig.v,
          encodedPacked: ethers.solidityPacked(
            ['bytes', 'bytes32', 'bytes32', 'uint8'],
            [userSignature.data, sig.r, sig.s, sig.v]
          )
        }

        setSignatureResult(newSignatureResult)
        console.log('üì¶ EIP-712 –ø–æ–¥–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', newSignatureResult)

        // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ STS (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤–Ω—É—Ç—Ä–∏ —Å–µ–±—è)
        try {
          await sendSignatureToSTS(universalResult.transactionHash, userAddress)
        } catch (stsError: any) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å EIP-712 –ø–æ–¥–ø–∏—Å—å –≤ STS:', stsError)
          showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ STS: ${stsError.message}`)
        }

      } catch (error: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ EIP-712 –ø–æ–¥–ø–∏—Å–∏:', error)
        showError(`–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${error.message}`)
      } finally {
        setLoadingState('signHash', false)
      }
    }

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    const copyToClipboard = async (text: string, label: string) => {
      try {
        await navigator.clipboard.writeText(text)
        showSuccess(`‚úÖ ${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å')
      }
    }

    // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const resetUniversalForm = () => {
      setUniversalForm({
        contractAddress: '',
        functionSignature: '',
        functionParams: [''],
        ethValue: '0'
      })
      setUniversalResult(null)
      setSignatureResult(null)
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º—É
    const addFunctionParam = () => {
      setUniversalForm(prev => ({
        ...prev,
        functionParams: [...prev.functionParams, '']
      }))
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã
    const removeFunctionParam = (index: number) => {
      setUniversalForm(prev => ({
        ...prev,
        functionParams: prev.functionParams.filter((_, i) => i !== index)
      }))
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    const updateFunctionParam = (index: number, value: string) => {
      setUniversalForm(prev => ({
        ...prev,
        functionParams: prev.functionParams.map((param, i) => i === index ? value : param)
      }))
    }

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Safe
    const handleDisconnectFromSafe = () => {
      if (safeOnChain) {
        safeOnChain.disconnect()
      }
      setSafeInfo(null)
      setUniversalResult(null)
      setSignatureResult(null)
      setPredictedSafeAddress('')
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –æ—Ç Safe
      setUniversalForm({
        contractAddress: '',
        functionSignature: '',
        functionParams: [''],
        ethValue: '0'
      })
      
      // –û—á–∏—â–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setSelectedContract(null)
      setSelectedFunction(null)
      setStructuredFormData({
        parameters: {},
        ethValue: '0'
      })
      if (currentSection === AppSection.CREATE_PROPOSAL) {
      setShowSafeManagement(true)
      }
      showSuccess('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Safe')
    }

    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-4xl mx-auto px-4">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              üß© Safe Multisig Manager
            </h1>
            <p className="text-gray-600">
              –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Safe –º—É–ª—å—Ç–∏—Å–∏–≥ –∫–æ—à–µ–ª—å–∫–æ–º
            </p>
          </div>

          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏ */}
          {network && userAddress && (
            <div className="mb-8 flex justify-center">
              <div className="bg-white rounded-lg shadow p-1 flex">
                <button
                  onClick={() => setCurrentSection(AppSection.PROPOSALS)}
                  className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${currentSection === AppSection.PROPOSALS
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:text-gray-900'
                    }`}
                >
                  üìã –ú–æ–∏ –ø—Ä–æ–ø–æ–∑–∞–ª—ã
                </button>
                <button
                  onClick={() => setCurrentSection(AppSection.CREATE_PROPOSAL)}
                  className={`px-6 py-2 rounded-md text-sm font-medium transition-colors ${currentSection === AppSection.CREATE_PROPOSAL
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-600 hover:text-gray-900'
                    }`}
                >
                  üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–∞
                </button>
              </div>
            </div>
          )}

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          {error && (
            <div className="mb-6 p-4 bg-red-100 border border-red-200 text-red-700 rounded-lg">
              {error}
            </div>
          )}

          {success && (
            <div className="mb-6 p-4 bg-green-100 border border-green-200 text-green-700 rounded-lg">
              {success}
            </div>
          )}

          {/* –ì–õ–ê–í–ù–ê–Ø –°–ï–ö–¶–ò–Ø */}
          {currentSection === AppSection.CREATE_PROPOSAL && (
            <>
              {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
              <div className="mb-8 p-6 bg-white rounded-lg shadow">
                <h2 className="text-xl font-semibold mb-4">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h2>

                {connectionStatus.state !== WalletState.Connected ? (
                  <div className="space-y-4">
                    <button
                      onClick={handleConnectWallet}
                      disabled={connectionStatus.isLoading}
                      className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                    >
                      {connectionStatus.isLoading ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'}
                    </button>

                    {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
                    {connectionStatus.state !== WalletState.Disconnected && (
                      <div className="text-sm text-gray-600">
                        –°–æ—Å—Ç–æ—è–Ω–∏–µ: {connectionStatus.state}
                        {connectionStatus.error && (
                          <div className="text-red-600 mt-1">{connectionStatus.error}</div>
                        )}
                      </div>
                    )}

                    <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                      <h3 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:</h3>
                      <div className="flex flex-wrap gap-2">
                        {getSupportedNetworks().map((network) => (
                          <div
                            key={network.chainId}
                            className="inline-flex items-center px-2 py-1 rounded text-xs font-medium"
                            style={{
                              backgroundColor: NETWORK_COLORS[network.chainId] + '20',
                              color: NETWORK_COLORS[network.chainId]
                            }}
                          >
                            {network.name}
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    <p>–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫: {formatAddress(userAddress)}</p>

                  </div>
                )}
              </div>


              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe */}
              {network && safeInfo && (
                <div className="mb-8 p-6 bg-white rounded-lg shadow">
                  <div className="flex items-center justify-between mb-4">
                    <h2 className="text-xl font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe</h2>
                    <div className="flex gap-2">
                      <button
                        onClick={() => {
                          setCurrentSection(AppSection.CREATE_PROPOSAL)
                          setShowSafeManagement(true)
                        }}
                        className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm"
                      >
                        üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                      </button>
                      <button
                        onClick={handleDisconnectFromSafe}
                        className="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors text-sm"
                      >
                        üîÑ –°–±—Ä–æ—Å–∏—Ç—å Safe
                      </button>
                    </div>
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <p><strong>–ê–¥—Ä–µ—Å:</strong> {formatAddress(safeInfo.address)}</p>
                      <p><strong>–ü–æ—Ä–æ–≥:</strong> {safeInfo.threshold} –∏–∑ {safeInfo.owners.length}</p>
                    </div>
                    <div>
                      <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {safeInfo.balance} ETH</p>
                      <p><strong>Nonce:</strong> {safeInfo.nonce}</p>
                    </div>
                  </div>

                  <div className="mt-4">
                    <strong>–í–ª–∞–¥–µ–ª—å—Ü—ã:</strong>
                    <ul className="mt-2 space-y-1">
                      {safeInfo.owners.map((owner, index) => (
                        <li key={index} className="text-sm font-mono">
                          {formatAddress(owner)}
                          {owner.toLowerCase() === userAddress.toLowerCase() && (
                            <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                              –í—ã
                            </span>
                          )}
                        </li>
                      ))}
                    </ul>
                  </div>

                </div>
              )}

              {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Safe */}
              {network && currentSection === AppSection.CREATE_PROPOSAL && (!safeInfo || showSafeManagement) && (
                <SafeManagement
                  onCreate={handleCreateSafeWithForm}
                  onPredict={handlePredictSafeAddress}
                  loading={loading.createSafe}
                  predicting={loading.predictAddress}
                  predictedAddress={predictedSafeAddress}
                  userAddress={userAddress}
                  className="mb-8"
                />
              )}

              {network && currentSection === AppSection.CREATE_PROPOSAL && safeInfo && (
                <div className="space-y-8">
                  {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
                  <div className="p-6 bg-white rounded-lg shadow">
                    <div className="flex items-center justify-between mb-4">
                      <h2 className="text-xl font-semibold">üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π</h2>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => setUseStructuredMode(true)}
                          className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                            useStructuredMode
                              ? 'bg-purple-100 text-purple-700'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          }`}
                        >
                          üìã ABI —Ä–µ–∂–∏–º
                        </button>
                        <button
                          onClick={() => setUseStructuredMode(false)}
                          className={`px-3 py-1 rounded-md text-sm font-medium transition-colors ${
                            !useStructuredMode
                              ? 'bg-purple-100 text-purple-700'
                              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                          }`}
                        >
                          ‚úèÔ∏è –†—É—á–Ω–æ–π –≤–≤–æ–¥
                        </button>
                      </div>
                    </div>
                    
                    <p className="text-gray-600 mb-6">
                      {useStructuredMode 
                        ? '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ ABI –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.'
                        : '–°–æ–∑–¥–∞–π—Ç–µ —Ö–µ—à –¥–ª—è –ª—é–±–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.'
                      }
                    </p>

                    {useStructuredMode ? (
                      /* –ù–æ–≤—ã–π UI —Å Dropdown */
                      <div className="space-y-6">
                        {/* Dropdown –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ */}
                        <ContractDropdown
                          onContractSelect={setSelectedContract}
                          selectedContract={selectedContract}
                          isLoading={contractsLoading}
                          error={contractsError}
                        />

                        {/* Dropdown –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ */}
                        <FunctionDropdown
                          contractAddress={selectedContract?.address || null}
                          onFunctionSelect={setSelectedFunction}
                          selectedFunction={selectedFunction}
                        />

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ */}
                        {selectedContract && safeOnChain && (
                          <ContractInfo 
                            contractAddress={selectedContract.address}
                            safeOnChain={safeOnChain}
                          />
                        )}

                        {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ */}
                        {selectedFunction && (
                          <ParameterForm
                            selectedFunction={selectedFunction}
                            onFormChange={setStructuredFormData}
                            formData={structuredFormData}
                          />
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ */}
                        {selectedContract && selectedFunction && (
                          <div className="pt-6 border-t border-gray-200">
                            <button
                              onClick={handleCreateStructuredHash}
                              disabled={loading.universalHash}
                              className={`w-full px-6 py-3 rounded-lg font-medium transition-colors ${
                                loading.universalHash
                                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                  : 'bg-purple-600 text-white hover:bg-purple-700'
                              }`}
                            >
                              {loading.universalHash ? (
                                <span className="flex items-center justify-center">
                                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                  </svg>
                                  –°–æ–∑–¥–∞–Ω–∏–µ —Ö–µ—à–∞...
                                </span>
                              ) : (
                                'üîê –°–æ–∑–¥–∞—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
                              )}
                            </button>
                          </div>
                        )}

                        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ABI —Ä–µ–∂–∏–º–∞ */}
                        {universalResult && (
                          <div className="mt-6 p-4 bg-green-50 rounded-lg">
                            <h3 className="font-semibold text-green-900 mb-4">‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω!</h3>

                            <div className="space-y-3 text-sm">
                              <div>
                                <label className="font-medium text-gray-700">–•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:</label>
                                <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                                  {universalResult.transactionHash}
                                </div>
                              </div>

                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                  <label className="font-medium text-gray-700">–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</label>
                                  <div className="mt-1 p-2 bg-white border rounded font-mono text-xs">
                                    {formatAddress(universalResult.transactionDetails.to)}
                                  </div>
                                </div>

                                <div>
                                  <label className="font-medium text-gray-700">ETH Value:</label>
                                  <div className="mt-1 p-2 bg-white border rounded">
                                    {universalResult.transactionDetails.value} ETH
                                  </div>
                                </div>

                                <div>
                                  <label className="font-medium text-gray-700">Nonce:</label>
                                  <div className="mt-1 p-2 bg-white border rounded">
                                    {universalResult.transactionDetails.nonce}
                                  </div>
                                </div>
                              </div>

                              <div>
                                <label className="font-medium text-gray-700">Encoded Data:</label>
                                <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                                  {universalResult.encodedData}
                                </div>
                              </div>

                              <div className="flex gap-3 pt-4">
                                <button
                                  onClick={handleSignTransactionHash}
                                  disabled={loading.signature}
                                  className={`flex-1 px-4 py-2 rounded-lg font-medium transition-colors ${
                                    loading.signature
                                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                                      : 'bg-purple-600 text-white hover:bg-purple-700'
                                  }`}
                                >
                                  {loading.signature ? 'üîÑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º...' : 'üñãÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'}
                                </button>

                                <button
                                  onClick={() => copyToClipboard(universalResult.transactionHash, '–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}
                                  className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                                >
                                  üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à
                                </button>
                              </div>
                            </div>

                            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                              <p className="text-blue-800 text-sm">
                                üí° <strong>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong> –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤–∞—à –∫–æ—à–µ–ª–µ–∫, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ö–µ—à –¥–ª—è —Ä—É—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏.
                              </p>
                            </div>
                          </div>
                        )}
                      </div>
                    ) : (
                      /* –°—Ç–∞—Ä—ã–π —Ä—É—á–Ω–æ–π UI */
                      <div className="space-y-6">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
                    <div className="space-y-6 mb-6">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ *
                          </label>
                          <input
                            type="text"
                            value={universalForm.contractAddress}
                            onChange={(e) => setUniversalForm(prev => ({ ...prev, contractAddress: e.target.value }))}
                            placeholder="0x..."
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-gray-700 mb-2">
                            ETH Value (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                          </label>
                          <input
                            type="text"
                            value={universalForm.ethValue}
                            onChange={(e) => setUniversalForm(prev => ({ ...prev, ethValue: e.target.value }))}
                            placeholder="0"
                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                          />
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">
                          –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ *
                          <span className="text-xs text-gray-500 ml-2">
                            (–Ω–∞–ø—Ä–∏–º–µ—Ä: mint(address,uint256) –∏–ª–∏ transfer(address,uint256))
                          </span>
                        </label>
                        <input
                          type="text"
                          value={universalForm.functionSignature}
                          onChange={(e) => setUniversalForm(prev => ({ ...prev, functionSignature: e.target.value }))}
                          placeholder="functionName(type1,type2)"
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                        />
                      </div>

                      <div>
                        <div className="flex justify-between items-center mb-3">
                          <label className="block text-sm font-medium text-gray-700">
                            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
                            <span className="text-xs text-gray-500 ml-2">
                              (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ)
                            </span>
                          </label>
                          <button
                            type="button"
                            onClick={addFunctionParam}
                            className="text-sm bg-purple-100 text-purple-700 px-3 py-1 rounded-lg hover:bg-purple-200 transition-colors"
                          >
                            + –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
                          </button>
                        </div>

                        <div className="space-y-3">
                          {universalForm.functionParams.map((param, index) => (
                            <div key={index} className="flex gap-3 items-center">
                              <div className="flex-1">
                                <input
                                  type="text"
                                  value={param}
                                  onChange={(e) => updateFunctionParam(index, e.target.value)}
                                  placeholder={`–ü–∞—Ä–∞–º–µ—Ç—Ä ${index + 1} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0x123... –∏–ª–∏ 100)`}
                                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                                />
                              </div>
                              {universalForm.functionParams.length > 1 && (
                                <button
                                  type="button"
                                  onClick={() => removeFunctionParam(index)}
                                  className="px-3 py-3 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                                  title="–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä"
                                >
                                  √ó
                                </button>
                              )}
                            </div>
                          ))}
                        </div>

                        <div className="mt-3 p-3 bg-gray-50 rounded-lg text-sm text-gray-600">
                          <p className="font-medium mb-2">–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</p>
                          <ul className="space-y-1 text-xs">
                            <li><strong>address:</strong> 0x1234567890123456789012345678901234567890</li>
                            <li><strong>uint256:</strong> 1000 (–∏–ª–∏ 100.5 –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å decimals)</li>
                            <li><strong>string:</strong> Hello World</li>
                            <li><strong>bool:</strong> true –∏–ª–∏ false</li>
                          </ul>
                        </div>
                      </div>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="flex gap-4">
                      <button
                        onClick={handleCreateUniversalHash}
                        disabled={loading.universalHash || !safeInfo}
                        className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50"
                      >
                        {loading.universalHash ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : 'üéØ –°–æ–∑–¥–∞—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}
                      </button>

                      <button
                        onClick={resetUniversalForm}
                        className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                      >
                        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
                      </button>
                    </div>

                    {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                    {universalResult && (
                      <div className="mt-6 p-4 bg-green-50 rounded-lg">
                        <h3 className="font-semibold text-green-900 mb-4">‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω!</h3>

                        <div className="space-y-3 text-sm">
                          <div>
                            <label className="font-medium text-gray-700">–•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                              {universalResult.transactionHash}
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div>
                              <label className="font-medium text-gray-700">–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</label>
                              <div className="mt-1 p-2 bg-white border rounded font-mono text-xs">
                                {formatAddress(universalResult.transactionDetails.to)}
                              </div>
                            </div>

                            <div>
                              <label className="font-medium text-gray-700">ETH Value:</label>
                              <div className="mt-1 p-2 bg-white border rounded">
                                {universalResult.transactionDetails.value} ETH
                              </div>
                            </div>

                            <div>
                              <label className="font-medium text-gray-700">Nonce:</label>
                              <div className="mt-1 p-2 bg-white border rounded">
                                {universalResult.transactionDetails.nonce}
                              </div>
                            </div>
                          </div>

                          <div>
                            <label className="font-medium text-gray-700">Encoded Data:</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                              {universalResult.encodedData}
                            </div>
                          </div>

                          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è */}
                          <div className="mt-4 flex flex-wrap gap-3">
                            <button
                              onClick={handleSignTransactionHash}
                              disabled={loading.signHash || signatureResult !== null}
                              className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 font-medium"
                            >
                              {loading.signHash ? '–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ...' : 'üñãÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (EIP-712)'}
                            </button>

                            <button
                              onClick={() => copyToClipboard(universalResult.transactionHash, '–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}
                              className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                            >
                              üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à
                            </button>
                          </div>

                          <div className="mt-4 p-3 bg-blue-50 border-l-4 border-blue-400">
                            <p className="text-blue-800 text-sm">
                              üí° <strong>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong> –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤–∞—à –∫–æ—à–µ–ª–µ–∫, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ö–µ—à –¥–ª—è —Ä—É—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏.
                            </p>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–ø–∏—Å–∏ */}
                    {signatureResult && (
                      <div className="mt-6 p-4 bg-purple-50 rounded-lg">
                        <h3 className="font-semibold text-purple-900 mb-4">üñãÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞!</h3>

                        <div className="space-y-3 text-sm">
                          <div>
                            <label className="font-medium text-gray-700">–ü–æ–¥–ø–∏—Å—å (EIP-712):</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                              {signatureResult.signature}
                            </div>
                            <div className="mt-2 flex gap-2">
                              <button
                                onClick={() => copyToClipboard(signatureResult.signature, '–ü–æ–¥–ø–∏—Å—å')}
                                className="px-3 py-1 bg-purple-100 text-purple-700 rounded text-xs hover:bg-purple-200"
                              >
                                üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
                              </button>
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                            <div>
                              <label className="font-medium text-gray-700">R:</label>
                              <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                                {signatureResult.r}
                              </div>
                            </div>
                            <div>
                              <label className="font-medium text-gray-700">S:</label>
                              <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                                {signatureResult.s}
                              </div>
                            </div>
                            <div>
                              <label className="font-medium text-gray-700">V:</label>
                              <div className="mt-1 p-2 bg-white border rounded">
                                {signatureResult.v}
                              </div>
                            </div>
                          </div>

                          <div className="mt-4 p-3 bg-green-50 border-l-4 border-green-400">
                            <p className="text-green-800 text-sm">
                              ‚úÖ <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ STS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                            </p>
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                    )}
                  </div>
                </div>
              )}
            </>
          )}

          {/* –†–ê–ó–î–ï–õ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ü–û–ó–ê–õ–ê–ú–ò */}
          {currentSection === AppSection.PROPOSALS && (
            <ProposalsPage
              network={network}
              userAddress={userAddress}
              safeOnChain={safeOnChain}
              safeOffChain={safeOffChain}
              safeInfo={safeInfo}
              setSafeInfo={setSafeInfo}
              showError={showError}
              showSuccess={showSuccess}
              onNavigateToSafeCreation={handleNavigateToSafeCreation}
            />
          )}

        </div>
      </div>
    )
  }

  export default SafeMultisigApp
