import React, { useState, useEffect } from 'react'
import { ethers } from 'ethers'
import { SafeTransaction } from '@safe-global/types-kit'

import SafeOnChain, { 
  TransactionParams, 
  UniversalFunctionCall,
  SafeConnectionForm,
  SafeCreationForm
} from '../lib/onchain'
import { SafeManagement, UserProposals } from '../components'
import SafeOffChain, { UniversalOperationResult } from '../lib/offchain'
import { 
  connectWallet, 
  checkWalletConnection, 
  formatAddress, 
  formatEthValue,
  parseEthValue,
  onAccountsChanged,
  onChainChanged,
  removeEventListeners,
  getNetworkConfig
} from '../lib/safe-common'
import { NETWORK_NAMES, NETWORK_COLORS, getSupportedNetworks, isNetworkSupported } from '../lib/constants'

interface SafeInfo {
  address: string
  owners: string[]
  threshold: number
  balance: string
  nonce: number
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏–∑ –±—ã–≤—à–µ–≥–æ SafeManager)
interface TransactionInfo {
  safeTxHash: string
  to: string
  value: string
  data: string
  nonce: number
  confirmationsRequired: number
  confirmationsCount: number
  isExecuted: boolean
  canExecute: boolean
  signatures: { [ownerAddress: string]: string }
}


interface UniversalTransactionResult {
  transactionHash: string
  safeTransaction: SafeTransaction | null // –ú–æ–∂–µ—Ç –±—ã—Ç—å null –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ SafeManager
  encodedData: string
  transactionDetails: {
    to: string
    value: string
    data: string
    nonce: number
  }
}

interface SignatureResult {
  signature: string
  r: string
  s: string
  v: number
  recoveryId: number
  encodedPacked: string
}

interface CollectedSignature {
  signer: string
  signature: string
}

interface ExecutionResult {
  hash: string
  signaturesUsed: number
  threshold: number
}

interface ApprovedHashInfo {
  txHash: string
  approvedCount: number
  totalOwners: number
  threshold: number
  canExecute: boolean
  approvedOwners: string[]
}

interface ImportSignatureForm {
  signerAddress: string
  signature: string
}

interface ExternalTransactionForm {
  contractAddress: string
  functionSignature: string
  functionParams: string[]
  ethValue: string
}

interface UniversalTransactionForm {
  contractAddress: string
  functionSignature: string
  functionParams: string[]
  ethValue: string
}

const SafeMultisigApp: React.FC = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [signer, setSigner] = useState<ethers.Signer | null>(null)
  const [userAddress, setUserAddress] = useState<string>('')
  const [isConnecting, setIsConnecting] = useState(false)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Safe
  const [safeInfo, setSafeInfo] = useState<SafeInfo | null>(null)
  const [predictedAddress, setPredictedAddress] = useState<string>('')
  const [lastCreatedSafeAddress, setLastCreatedSafeAddress] = useState<string>('')

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const [pendingTransactions, setPendingTransactions] = useState<TransactionInfo[]>([])
  const [currentTransaction, setCurrentTransaction] = useState<TransactionInfo | null>(null)

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ Safe –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const [showSafeManagement, setShowSafeManagement] = useState(!safeInfo)
  const [predictedSafeAddress, setPredictedSafeAddress] = useState<string>('')
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const [showUserProposals, setShowUserProposals] = useState(true)
  const [userProposalsRefresh, setUserProposalsRefresh] = useState(0)

  const [transactionForm, setTransactionForm] = useState({
    to: '',
    value: '0',
    data: '0x'
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const [universalForm, setUniversalForm] = useState<UniversalTransactionForm>({
    contractAddress: '',
    functionSignature: '',
    functionParams: [''],
    ethValue: '0'
  })

  // –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [universalResult, setUniversalResult] = useState<UniversalTransactionResult | null>(null)
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–ø–∏—Å–∏ —Ö–µ—à–∞
  const [signatureResult, setSignatureResult] = useState<SignatureResult | null>(null)
  
  // –°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [collectedSignatures, setCollectedSignatures] = useState<CollectedSignature[]>([])
  
  // –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const [executionResult, setExecutionResult] = useState<ExecutionResult | null>(null)
  
  // Approved hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const [approvedHashInfos, setApprovedHashInfos] = useState<Map<string, ApprovedHashInfo>>(new Map())
  
  // –§–æ—Ä–º–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–µ–π
  const [importSignatureForm, setImportSignatureForm] = useState<ImportSignatureForm>({
    signerAddress: '',
    signature: ''
  })
  
  // –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
  const [showImportMode, setShowImportMode] = useState<boolean>(false)
  
  // –§–æ—Ä–º–∞ –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
  const [externalTransactionForm, setExternalTransactionForm] = useState<ExternalTransactionForm>({
    contractAddress: '',
    functionSignature: '',
    functionParams: [''],
    ethValue: '0'
  })

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  const [loading, setLoading] = useState<{ [key: string]: boolean }>({})
  const [error, setError] = useState<string>('')
  const [success, setSuccess] = useState<string>('')

  // –≠–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–æ–≤  
  const [safeOnChain, setSafeOnChain] = useState<SafeOnChain | null>(null)
  const [safeOffChain] = useState(() => new SafeOffChain())

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    initializeApp()

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ—à–µ–ª—å–∫–∞
    onAccountsChanged(handleAccountsChanged)
    onChainChanged(handleChainChanged)

    return () => {
      removeEventListeners()
    }
  }, [])

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ safeOnChain –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ signer
  useEffect(() => {
    if (signer) {
      console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SafeOnChain –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è signer')
      
      // –ï—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω Safe, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º signer
      const currentSafeAddress = safeInfo?.address
      const currentOwners = safeInfo?.owners
      const currentThreshold = safeInfo?.threshold
      
      const newSafeOnChain = new SafeOnChain(signer)
      setSafeOnChain(newSafeOnChain)
      
      // –î–µ–ª–∞–µ–º SafeOnChain –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (typeof window !== 'undefined') {
        // –î–æ–±–∞–≤–ª—è–µ–º SafeOnChain –≤ window –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const w = window as any
        w.debugSafeOnChain = newSafeOnChain
        w.debugSafeOffChain = safeOffChain
        
        console.log('üîß –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª–∏:')
        console.log('  - debugSafeOnChain - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –±–ª–æ–∫—á–µ–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π')
        console.log('  - debugSafeOffChain - –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å STS –∏ –ø—Ä–æ–ø–æ–∑–∞–ª–∞–º–∏')
      }
      
      // –ï—Å–ª–∏ –±—ã–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π Safe, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      if (currentSafeAddress && currentOwners && currentThreshold) {
        console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe:', currentSafeAddress)
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        setTimeout(async () => {
          try {
            await newSafeOnChain.connectToSafeWithForm({
              safeAddress: currentSafeAddress,
              owners: currentOwners,
              threshold: currentThreshold
            })
            console.log('‚úÖ Safe –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω')
          } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Safe:', error)
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Safe –ø—Ä–∏ –æ—à–∏–±–∫–µ
            setSafeInfo(null)
            setPendingTransactions([])
            setShowSafeManagement(true)
            showError('Safe –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ —Å–º–µ–Ω—ã –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å.')
          }
        }, 100)
      }
    } else {
      setSafeOnChain(null)
      // –ü—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ signer –æ—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Safe
      setSafeInfo(null)
      setPendingTransactions([])
      setShowSafeManagement(true)
    }
  }, [signer])

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const initializeApp = async () => {
    try {
      const connectedSigner = await checkWalletConnection()
      if (connectedSigner) {
        setSigner(connectedSigner)
        const address = await connectedSigner.getAddress()
        setUserAddress(address)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–æ—à–µ–ª—å–∫–∞
  const handleAccountsChanged = async (accounts: string[]) => {
    if (accounts.length === 0) {
      setSigner(null)
      setUserAddress('')
      setSafeInfo(null)
    } else {
      await initializeApp()
    }
  }

  const handleChainChanged = () => {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–µ—Ç–∏
    window.location.reload()
  }

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
  const setLoadingState = (key: string, value: boolean) => {
    setLoading(prev => ({ ...prev, [key]: value }))
  }

  const showError = (message: string) => {
    setError(message)
    setSuccess('')
    setTimeout(() => setError(''), 5000)
  }

  const showSuccess = (message: string) => {
    setSuccess(message)
    setError('')
    setTimeout(() => setSuccess(''), 5000)
  }

  // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
  const handleConnectWallet = async () => {
    setIsConnecting(true)
    try {
      const connectedSigner = await connectWallet()
      setSigner(connectedSigner)
      const address = await connectedSigner.getAddress()
      setUserAddress(address)
      showSuccess('–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    } catch (error) {
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è')
    }
    setIsConnecting(false)
  }

  // 2. –°–æ–∑–¥–∞–Ω–∏–µ Safe —Å —Ñ–æ—Ä–º–æ–π
  const handleCreateSafeWithForm = async (formData: SafeCreationForm) => {
    if (!safeOnChain || !signer) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('createSafe', true)
    try {
      console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Safe —Å —Ñ–æ—Ä–º–æ–π:', formData)
      
      await safeOnChain.createSafeWithForm(formData)
      
      const safeAddress = safeOnChain.getCurrentSafeAddress()
      if (!safeAddress) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Safe')
      }
      
      setLastCreatedSafeAddress(safeAddress)
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe
      const safeData = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: safeData.address,
        owners: safeData.owners,
        threshold: safeData.threshold,
        balance: safeData.balance,
        nonce: safeData.nonce
      })
      
      // –î–ª—è –Ω–æ–≤–æ—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ Safe –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ä–∞–∑—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∏—Ö –µ—â–µ –Ω–µ—Ç)
      // –ü—Ä–æ—Å—Ç–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º
      setPendingTransactions([])
      
      // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setShowSafeManagement(false)
      
      showSuccess(`Safe —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${formatAddress(safeAddress)}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Safe:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Safe')
    }
    setLoadingState('createSafe', false)
  }

  // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ Safe
  const handlePredictSafeAddress = async (formData: SafeCreationForm) => {
    if (!safeOnChain) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('predictAddress', true)
    try {
      console.log('üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å Safe –ø–æ —Ñ–æ—Ä–º–µ:', formData)
      
      const predictedAddress = await safeOnChain.getSafeAddressByForm(formData)
      setPredictedSafeAddress(predictedAddress)
      
      showSuccess(`–ê–¥—Ä–µ—Å Safe –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω: ${formatAddress(predictedAddress)}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞')
    }
    setLoadingState('predictAddress', false)
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É Safe —Å —Ñ–æ—Ä–º–æ–π
  const handleConnectToSafeWithForm = async (formData: SafeConnectionForm) => {
    if (!safeOnChain) {
      showError('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫')
      return
    }

    setLoadingState('connectSafe', true)
    try {
      console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Safe —Å —Ñ–æ—Ä–º–æ–π:', formData)
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Safe (SafeManager –ø—Ä–æ–≤–µ—Ä–∏—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
      await safeOnChain.connectToSafeWithForm(formData)
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe
      const safeData = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: safeData.address,
        owners: safeData.owners,
        threshold: safeData.threshold,
        balance: safeData.balance,
        nonce: safeData.nonce
      })
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
      await loadPendingTransactions(formData.safeAddress)
      
      // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      setShowSafeManagement(false)
      
      showSuccess(`–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Safe: ${formatAddress(formData.safeAddress)}`)
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe:', error)
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe')
    }
    setLoadingState('connectSafe', false)
  }

  // 3. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleProposeTransaction = async () => {
    if (!safeOnChain || !safeInfo || !signer) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    if (!transactionForm.to || !ethers.isAddress(transactionForm.to)) {
      showError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
      return
    }

    setLoadingState('propose', true)
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É SafeOnChain.proposeTransaction (–±–µ–∑ STS –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
      const safeTxHash = await safeOnChain.proposeTransaction(transactionForm)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await loadPendingTransactions(safeInfo.address)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      refreshUserProposals()
      
      showSuccess(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ! Hash: ${formatAddress(safeTxHash)}`)
      
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setTransactionForm({ to: '', value: '0', data: '0x' })
    } catch (error) {
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    }
    setLoadingState('propose', false)
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleCreateUniversalHash = async () => {
    if (!safeOnChain || !safeInfo) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setLoadingState('universalHash', true)
    setUniversalResult(null)

    try {
      if (!universalForm.contractAddress || !universalForm.functionSignature) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏')
      }

      // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã
      const paramTypes = universalForm.functionSignature
        .split('(')[1]
        ?.split(')')[0]
        ?.split(',')
        ?.map(p => p.trim())
        ?.filter(p => p.length > 0) || []

      const paramValues = universalForm.functionParams.slice(0, paramTypes.length)

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã
      const convertedParams = paramValues.map((value, index) => {
        const paramType = paramTypes[index]
        if (!paramType) return value

        // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
        const cleanValue = value.trim()
        if (!cleanValue) return value

        try {
          if (paramType.includes('uint') || paramType.includes('int')) {
            // –î–ª—è —á–∏—Å–µ–ª - –ø–∞—Ä—Å–∏–º –∫–∞–∫ BigInt
            if (cleanValue.includes('.')) {
              // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º parseUnits
              return ethers.parseUnits(cleanValue, 18)
            } else {
              // –¶–µ–ª–æ–µ —á–∏—Å–ª–æ
              return ethers.parseUnits(cleanValue, 0)
            }
          }
          if (paramType === 'address') {
            return ethers.getAddress(cleanValue) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
          }
          if (paramType === 'bool') {
            return cleanValue.toLowerCase() === 'true'
          }
          // –î–ª—è string, bytes –∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          return cleanValue
        } catch (error) {
          console.warn(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ${index}: ${error}`)
          return cleanValue
        }
      })

      const functionCall: UniversalFunctionCall = {
        contractAddress: universalForm.contractAddress,
        functionSignature: universalForm.functionSignature,
        functionParams: convertedParams,
        value: universalForm.ethValue || '0'
      }

      console.log('üéØ –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è:', functionCall)

      // –°–æ–∑–¥–∞–µ–º —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ SafeOnChain 
      const result = await safeOnChain.createUniversalTransactionHash(
        functionCall
      )

      // –£–ë–ò–†–ê–ï–ú –æ—Ç–ø—Ä–∞–≤–∫—É –≤ STS –Ω–∞ —ç—Ç–∞–ø–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–∞ - –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è

      setUniversalResult({
        transactionHash: result.transactionHash,
        safeTransaction: result.safeTransaction,
        encodedData: result.encodedData,
        transactionDetails: result.transactionDetails
      })

      showSuccess(`‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω! 
        –•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: ${result.transactionHash}
        Nonce: ${result.transactionDetails.nonce}`)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Ö–µ—à–∞:', error)
      showError(`–û—à–∏–±–∫–∞: ${error.message}`)
    }

    setLoadingState('universalHash', false)
  }

  // –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ö–µ—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleSignTransactionHash = async () => {
    if (!universalResult || !signer || !safeOnChain || !safeInfo) {
      showError('–ù–µ—Ç —Ö–µ—à–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏, –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ Safe Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
      return
    }

    setLoadingState('signHash', true)
    setSignatureResult(null)

    try {
      console.log('üñãÔ∏è –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Protocol Kit (EIP-712):', universalResult.transactionHash)

      // –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userAddress = await signer.getAddress()
      console.log('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–¥—Ä–µ—Å:', userAddress)
      console.log('üîç –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', universalResult.transactionHash)

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Safe SDK
      const safeSdk = safeOnChain.getSafeSdk()
      const safeTransaction = universalResult.safeTransaction
      
      if (!safeTransaction) {
        throw new Error('SafeTransaction –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ')
      }
      
      console.log('üìù –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ Safe SDK (EIP-712)...')
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const signedSafeTransaction = await safeSdk.signTransaction(safeTransaction, 'eth_signTypedData')
      
      console.log('üìä –ü–æ–¥–ø–∏—Å–µ–π –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', signedSafeTransaction.signatures.size)
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∞–¥—Ä–µ—Å–∞)
      let userSignature = signedSafeTransaction.signatures.get(userAddress) || 
                         signedSafeTransaction.signatures.get(userAddress.toLowerCase()) ||
                         signedSafeTransaction.signatures.get(ethers.getAddress(userAddress))
      
      if (!userSignature) {
        console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–µ–π:', Array.from(signedSafeTransaction.signatures.keys()))
        throw new Error(`–ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞ ${userAddress}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏: ${Array.from(signedSafeTransaction.signatures.keys()).join(', ')}`)
      }
      
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')
      
      const signatureData = typeof userSignature === 'object' && userSignature && 'data' in userSignature 
        ? String(userSignature.data) 
        : String(userSignature)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–¥–ø–∏—Å—è–º–∏
      universalResult.safeTransaction = signedSafeTransaction
      
      // –†–∞–∑–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const sig = ethers.Signature.from(signatureData)
      
      const signatureResult: SignatureResult = {
        signature: signatureData,
        r: sig.r,
        s: sig.s, 
        v: sig.v,
        recoveryId: sig.v,
        encodedPacked: ethers.solidityPacked(
          ['bytes', 'bytes32', 'bytes32', 'uint8'],
          [signatureData, sig.r, sig.s, sig.v]
        )
      }

      setSignatureResult(signatureResult)

      // –¢–ï–ü–ï–†–¨ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS
      if (safeOffChain) {
        try {
          console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS...')
          await safeOffChain.proposeUniversalResult(
            safeInfo.address,
            universalResult,
            userAddress,
            'Universal Function Call'
          )
          console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ STS!')
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          refreshUserProposals()
          
        } catch (stsError: any) {
          console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ STS:', stsError)
          showError(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ STS: ${stsError.message}`)
        }
      }

      showSuccess(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ —á–µ—Ä–µ–∑ EIP-712!
        –ü–æ–¥–ø–∏—Å—å: ${signatureData.slice(0, 20)}...${signatureData.slice(-10)}`)

      console.log('üì¶ EIP-712 –ø–æ–¥–ø–∏—Å—å:', signatureResult)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ EIP-712 –ø–æ–¥–ø–∏—Å–∏:', error)
      showError(`–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∏: ${error.message}`)
    }

    setLoadingState('signHash', false)
  }

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = async (text: string, label: string) => {
    try {
      await navigator.clipboard.writeText(text)
      showSuccess(`‚úÖ ${label} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞`)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
      showError('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å')
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
  const addSignatureToCollection = async () => {
    if (!signatureResult || !signer) {
      showError('–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –∫–æ—à–µ–ª–µ–∫ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    try {
      const signerAddress = await signer.getAddress()
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
      const existingSignature = collectedSignatures.find(s => s.signer.toLowerCase() === signerAddress.toLowerCase())
      if (existingSignature) {
        showError('–ü–æ–¥–ø–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        return
      }

      const newSignature: CollectedSignature = {
        signer: signerAddress,
        signature: signatureResult.signature
      }

      setCollectedSignatures(prev => [...prev, newSignature])
      
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ localStorage
      
      showSuccess(`‚úÖ –ü–æ–¥–ø–∏—Å—å –æ—Ç ${signerAddress} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é`)
      
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å—å:', newSignature)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:', error)
      showError(`–û—à–∏–±–∫–∞: ${error.message}`)
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  const removeSignatureFromCollection = (signer: string) => {
    setCollectedSignatures(prev => prev.filter(s => s.signer !== signer))
    
    // –ü–æ–¥–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–±–µ–∑ localStorage)
    
    showSuccess(`‚úÖ –ü–æ–¥–ø–∏—Å—å –æ—Ç ${signer} —É–¥–∞–ª–µ–Ω–∞`)
  }

  // –ò–º–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∏
  const importExternalSignature = async () => {
    if (!importSignatureForm.signerAddress || !importSignatureForm.signature) {
      showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å—å')
      return
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞
      const normalizedAddress = ethers.getAddress(importSignatureForm.signerAddress)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ –ø–æ–¥–ø–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞
      const existingSignature = collectedSignatures.find(s => s.signer.toLowerCase() === normalizedAddress.toLowerCase())
      if (existingSignature) {
        showError('–ü–æ–¥–ø–∏—Å—å –æ—Ç —ç—Ç–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞')
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏ (–¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0x –∏ –∏–º–µ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É)
      if (!importSignatureForm.signature.startsWith('0x') || importSignatureForm.signature.length !== 132) {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è 0x + 130 —Å–∏–º–≤–æ–ª–æ–≤')
        return
      }

      const newSignature: CollectedSignature = {
        signer: normalizedAddress,
        signature: importSignatureForm.signature
      }

      setCollectedSignatures(prev => [...prev, newSignature])
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é (–±–µ–∑ localStorage)
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setImportSignatureForm({
        signerAddress: '',
        signature: ''
      })

      showSuccess(`‚úÖ –ü–æ–¥–ø–∏—Å—å –æ—Ç ${normalizedAddress} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞`)
      
      console.log('üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å—å:', newSignature)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–∏:', error)
      if (error.code === 'INVALID_ARGUMENT') {
        showError('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ Ethereum')
      } else {
        showError(`–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: ${error.message}`)
      }
    }
  }

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –∏–º–ø–æ—Ä—Ç–∞
  const resetImportForm = () => {
    setImportSignatureForm({
      signerAddress: '',
      signature: ''
    })
  }

  // –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π
  const startImportMode = () => {
    setShowImportMode(true)
    setCollectedSignatures([])
    setExecutionResult(null)
    resetImportForm()
    setExternalTransactionForm({
      contractAddress: '',
      functionSignature: '',
      functionParams: [''],
      ethValue: '0'
    })
    showSuccess('üîÑ –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
  }

  // –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∏–º–ø–æ—Ä—Ç–∞
  const stopImportMode = () => {
    setShowImportMode(false)
    setCollectedSignatures([])
    setExecutionResult(null)
    resetImportForm()
    showSuccess('‚úÖ –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω')
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–æ –≤–Ω–µ—à–Ω—é—é —Ñ–æ—Ä–º—É
  const addExternalFunctionParam = () => {
    setExternalTransactionForm(prev => ({
      ...prev,
      functionParams: [...prev.functionParams, '']
    }))
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–π —Ñ–æ—Ä–º—ã
  const removeExternalFunctionParam = (index: number) => {
    setExternalTransactionForm(prev => ({
      ...prev,
      functionParams: prev.functionParams.filter((_, i) => i !== index)
    }))
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤–Ω–µ—à–Ω–µ–π —Ñ–æ—Ä–º—ã
  const updateExternalFunctionParam = (index: number, value: string) => {
    setExternalTransactionForm(prev => ({
      ...prev,
      functionParams: prev.functionParams.map((param, i) => i === index ? value : param)
    }))
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
  const executeExternalTransaction = async () => {
    if (!safeInfo || !safeOnChain || collectedSignatures.length === 0 || !externalTransactionForm.contractAddress || !externalTransactionForm.functionSignature) {
      showError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å–∏')
      return
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SafeManager
    if (!safeOnChain.isConnected()) {
      console.log('‚ö†Ô∏è SafeManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
      try {
        await safeOnChain.connectToSafeWithForm({
          safeAddress: safeInfo.address,
          owners: safeInfo.owners,
          threshold: safeInfo.threshold
        })
        console.log('‚úÖ SafeManager —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
      } catch (reconnectError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å SafeManager:', reconnectError)
        showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.')
        return
      }
    }

    setLoadingState('executeExternalTransaction', true)
    setExecutionResult(null)

    try {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ—à–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—è–º–∏...')
      
      if (collectedSignatures.length < safeInfo.threshold) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${safeInfo.threshold}, —Å–æ–±—Ä–∞–Ω–æ: ${collectedSignatures.length}`)
      }

      // –°–æ–∑–¥–∞–µ–º UniversalFunctionCall –∏–∑ —Ñ–æ—Ä–º—ã
      const functionCall = {
        contractAddress: externalTransactionForm.contractAddress,
        functionSignature: externalTransactionForm.functionSignature,
        functionParams: externalTransactionForm.functionParams,
        value: externalTransactionForm.ethValue || '0'
      }

      console.log('üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏:', functionCall)

      // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ SafeManager
      const transactionResult = await safeOnChain.createUniversalTransactionHash(
        functionCall
      )

      console.log('üéØ –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:', transactionResult.transactionHash)

      // –ü–æ–¥–ø–∏—Å–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –≤ collectedSignatures (–±–µ–∑ localStorage)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –≥–æ—Ç–æ–≤—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
      // –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º executeTransactionByHash
      const result = await safeOnChain.executeTransactionByHash(
        transactionResult.transactionHash,
        safeOffChain
      )

      setExecutionResult({
        hash: result,
        signaturesUsed: collectedSignatures.length,
        threshold: safeInfo.threshold
      })

      showSuccess(`‚úÖ –í–Ω–µ—à–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!
        –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result}`)

      console.log('üéâ –í–Ω–µ—à–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', result)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      showError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`)
    }

    setLoadingState('executeExternalTransaction', false)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏
  const executeTransactionWithSignatures = async () => {
    if (!universalResult || !safeInfo || !safeOnChain || collectedSignatures.length === 0) {
      showError('–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π')
      return
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SafeManager
    if (!safeOnChain.isConnected()) {
      console.log('‚ö†Ô∏è SafeManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
      try {
        await safeOnChain.connectToSafeWithForm({
          safeAddress: safeInfo.address,
          owners: safeInfo.owners,
          threshold: safeInfo.threshold
        })
        console.log('‚úÖ SafeManager —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω')
      } catch (reconnectError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å SafeManager:', reconnectError)
        showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.')
        return
      }
    }

    setLoadingState('executeTransaction', true)
    setExecutionResult(null)

    try {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—è–º–∏...')
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–µ–π:', collectedSignatures.length)
      console.log('üéØ Threshold Safe:', safeInfo.threshold)

      if (collectedSignatures.length < safeInfo.threshold) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π! –¢—Ä–µ–±—É–µ—Ç—Å—è: ${safeInfo.threshold}, —Å–æ–±—Ä–∞–Ω–æ: ${collectedSignatures.length}`)
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ localStorage)

      // SafeManager –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ safeTxHash
      // –í –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º executeTransactionByHash  
      const result = await safeOnChain.executeTransactionByHash(
        universalResult.transactionHash,
        safeOffChain
      )

      setExecutionResult({
        hash: result,
        signaturesUsed: collectedSignatures.length,
        threshold: safeInfo.threshold
      })

      showSuccess(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!
        –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${result}
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π: ${collectedSignatures.length}`)

      console.log('üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:', result)

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      showError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`)
    }

    setLoadingState('executeTransaction', false)
  }

  // =============================================================================
  // APPROVED HASH WORKFLOW
  // =============================================================================

  // –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
  const handleApproveTransactionHash = async (txInfo: TransactionInfo) => {
    if (!safeOnChain || !safeInfo || !signer) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setLoadingState(`approve_${txInfo.safeTxHash}`, true)
    try {
      console.log('üìù –û–¥–æ–±—Ä—è–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', txInfo.safeTxHash)
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ STS –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º approve
      const txData = await safeOffChain.getTransaction(txInfo.safeTxHash)
      const safeTransaction = await safeOnChain.createSafeTransaction({
        to: txData.to,
        value: ethers.formatEther(txData.value || '0'),
        data: txData.data || '0x'
      })
      
      // Approve hash –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
      await safeOnChain.approveTransactionHash(safeTransaction)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö
      await updateApprovedHashInfo(txInfo.safeTxHash)
      
      showSuccess('‚úÖ –•—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω!')
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ö—ç—à–∞:', error)
      showError(`–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${error.message}`)
    }
    setLoadingState(`approve_${txInfo.safeTxHash}`, false)
  }

  // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å pre-approved –ø–æ–¥–ø–∏—Å—è–º–∏
  const handleExecuteWithPreApprovals = async (txInfo: TransactionInfo) => {
    if (!safeOnChain || !safeInfo || !signer) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setLoadingState(`execute_preapproved_${txInfo.safeTxHash}`, true)
    try {
      console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å pre-approved –ø–æ–¥–ø–∏—Å—è–º–∏:', txInfo.safeTxHash)
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º executeTransactionByHash —Å STS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
      const txHash = await safeOnChain.executeTransactionByHash(txInfo.safeTxHash, safeOffChain)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
      const updatedSafeInfo = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: updatedSafeInfo.address,
        owners: updatedSafeInfo.owners,
        threshold: updatedSafeInfo.threshold,
        balance: updatedSafeInfo.balance,
        nonce: updatedSafeInfo.nonce
      })
      
      await loadPendingTransactions(safeInfo.address)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      refreshUserProposals()
      
      // –û—á–∏—â–∞–µ–º approved hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      setApprovedHashInfos(prev => {
        const newInfos = new Map(prev)
        newInfos.delete(txInfo.safeTxHash)
        return newInfos
      })
      
      showSuccess(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å pre-approved hash! Hash: ${formatAddress(txHash)}`)
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å pre-approved:', error)
      showError(`–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`)
    }
    setLoadingState(`execute_preapproved_${txInfo.safeTxHash}`, false)
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const updateApprovedHashInfo = async (safeTxHash: string) => {
    if (!safeOnChain) return

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö —á–µ—Ä–µ–∑ SafeOnChain
      const approvedOwners = await safeOnChain.checkApprovedOwners(safeTxHash)
      const totalOwners = safeInfo?.owners?.length || 0
      const threshold = safeInfo?.threshold || 1
      
      const approvalInfo = {
        approvedCount: approvedOwners.length,
        totalOwners: totalOwners,
        threshold: threshold,
        canExecute: approvedOwners.length >= threshold,
        approvedOwners: approvedOwners
      }
      
      setApprovedHashInfos(prev => {
        const newInfos = new Map(prev)
        newInfos.set(safeTxHash, {
          txHash: safeTxHash,
          ...approvalInfo
        })
        return newInfos
      })
      
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö:', approvalInfo)
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö:', error)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const updateAllApprovedHashInfos = async () => {
    if (!safeOnChain) return

    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–¥–æ–±—Ä–µ–Ω–∏—è—Ö –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...')
    
    for (const tx of pendingTransactions) {
      if (!tx.isExecuted) {
        await updateApprovedHashInfo(tx.safeTxHash)
      }
    }
  }

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const resetUniversalForm = () => {
    setUniversalForm({
      contractAddress: '',
      functionSignature: '',
      functionParams: [''],
      ethValue: '0'
    })
    setUniversalResult(null)
    setSignatureResult(null)
    setCollectedSignatures([])
    setExecutionResult(null)
    resetImportForm()
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ —Ñ–æ—Ä–º—É
  const addFunctionParam = () => {
    setUniversalForm(prev => ({
      ...prev,
      functionParams: [...prev.functionParams, '']
    }))
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ —Ñ–æ—Ä–º—ã
  const removeFunctionParam = (index: number) => {
    setUniversalForm(prev => ({
      ...prev,
      functionParams: prev.functionParams.filter((_, i) => i !== index)
    }))
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
  const updateFunctionParam = (index: number, value: string) => {
    setUniversalForm(prev => ({
      ...prev,
      functionParams: prev.functionParams.map((param, i) => i === index ? value : param)
    }))
  }

  // 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleConfirmTransaction = async (txInfo: TransactionInfo) => {
    if (!safeOnChain || !safeInfo || !signer) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    setLoadingState(`confirm_${txInfo.safeTxHash}`, true)
    try {
      // SafeManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç STS/–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ STS –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º approve  
      const txData = await safeOffChain.getTransaction(txInfo.safeTxHash)
      const safeTransaction = await safeOnChain.createSafeTransaction({
        to: txData.to,
        value: ethers.formatEther(txData.value || '0'),
        data: txData.data || '0x'
      })
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ approve hash –≤ –±–ª–æ–∫—á–µ–π–Ω–µ
      await safeOnChain.approveTransactionHash(safeTransaction)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      await loadPendingTransactions(safeInfo.address)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      refreshUserProposals()
      
      showSuccess('–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞!')
    } catch (error) {
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    }
    setLoadingState(`confirm_${txInfo.safeTxHash}`, false)
  }

  // 5. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const handleExecuteTransaction = async (txInfo: TransactionInfo) => {
    if (!safeOnChain || !safeInfo || !signer) {
      showError('Safe –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω')
      return
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è SafeManager
    if (!safeOnChain.isConnected()) {
      console.log('‚ö†Ô∏è SafeManager –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...')
      try {
        await safeOnChain.connectToSafeWithForm({
          safeAddress: safeInfo.address,
          owners: safeInfo.owners,
          threshold: safeInfo.threshold
        })
        console.log('‚úÖ SafeManager —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
      } catch (reconnectError) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å SafeManager:', reconnectError)
        showError('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Safe. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é.')
        return
      }
    }

    setLoadingState(`execute_${txInfo.safeTxHash}`, true)
    try {
      // SafeManager –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∏ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º executeTransactionByHash —Å STS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
      const txHash = await safeOnChain.executeTransactionByHash(txInfo.safeTxHash, safeOffChain)

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Safe –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
      const updatedSafeInfo = await safeOnChain.getCurrentSafeInfo()
      setSafeInfo({
        address: updatedSafeInfo.address,
        owners: updatedSafeInfo.owners,
        threshold: updatedSafeInfo.threshold,
        balance: updatedSafeInfo.balance,
        nonce: updatedSafeInfo.nonce
      })
      await loadPendingTransactions(safeInfo.address)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      refreshUserProposals()
      
      showSuccess(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! Hash: ${formatAddress(txHash)}`)
    } catch (error) {
      showError(error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
    }
    setLoadingState(`execute_${txInfo.safeTxHash}`, false)
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const loadPendingTransactions = async (safeAddress: string) => {
    if (!safeOnChain) {
      console.log('SafeManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º safeOffChain –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      const stsTransactions = await safeOffChain.getPendingTransactions(safeAddress)
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç TransactionInfo
      const transactions: TransactionInfo[] = stsTransactions.map(tx => ({
        safeTxHash: tx.safeTxHash,
        to: tx.to,
        value: ethers.formatEther(tx.value || '0'),
        data: tx.data || '0x',
        nonce: parseInt(tx.nonce?.toString() || '0'),
        confirmationsRequired: tx.confirmationsRequired || 1,
        confirmationsCount: tx.confirmations?.length || 0,
        isExecuted: tx.isExecuted || false,
        canExecute: (tx.confirmations?.length || 0) >= (tx.confirmationsRequired || 1),
        signatures: {}
      }))
      
      setPendingTransactions(transactions)

      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${transactions.length} –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º approved hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      if (transactions.length > 0) {
        console.log('üîÑ –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ approved hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...')
        setTimeout(async () => {
          await updateAllApprovedHashInfos()
        }, 500) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è race conditions
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error)
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Safe
  const handleDisconnectFromSafe = () => {
    if (safeOnChain) {
      safeOnChain.disconnect()
    }
    setSafeInfo(null)
    setCurrentTransaction(null)
    setPendingTransactions([])
    setUniversalResult(null)
    setSignatureResult(null)
    setCollectedSignatures([])
    setExecutionResult(null)
    setPredictedSafeAddress('')
    setApprovedHashInfos(new Map()) // –û—á–∏—â–∞–µ–º approved hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    setShowSafeManagement(true)
    showSuccess('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Safe')
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø—Ä–æ–ø–æ–∑–∞–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserProposalAction = async (proposal: any, action: 'sign' | 'execute' | 'view') => {
    console.log(`üé¨ –î–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–ø–æ–∑–∞–ª–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${action}`, proposal.safeTxHash)

    try {
      switch (action) {
        case 'sign':
          if (!safeOnChain) {
            showError('Safe Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            return
          }
          
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª —á–µ—Ä–µ–∑ approve hash
          const txData = await safeOffChain.getTransaction(proposal.safeTxHash)
          const safeTransaction = await safeOnChain.createSafeTransaction({
            to: txData.to,
            value: ethers.formatEther(txData.value || '0'),
            data: txData.data || '0x'
          })
          
          await safeOnChain.approveTransactionHash(safeTransaction)
          showSuccess('–ü—Ä–æ–ø–æ–∑–∞–ª –ø–æ–¥–ø–∏—Å–∞–Ω!')
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
          setUserProposalsRefresh(prev => prev + 1)
          if (safeInfo) {
            await loadPendingTransactions(safeInfo.address)
          }
          break

        case 'execute':
          if (!safeOnChain) {
            showError('Safe Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
            return
          }
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ STS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é  
          const txHash = await safeOnChain.executeTransactionByHash(proposal.safeTxHash, safeOffChain)
          showSuccess(`–ü—Ä–æ–ø–æ–∑–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω! Hash: ${formatAddress(txHash)}`)
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          setUserProposalsRefresh(prev => prev + 1)
          if (safeInfo) {
            const updatedSafeInfo = await safeOnChain.getCurrentSafeInfo()
            setSafeInfo({
              address: updatedSafeInfo.address,
              owners: updatedSafeInfo.owners,
              threshold: updatedSafeInfo.threshold,
              balance: updatedSafeInfo.balance,
              nonce: updatedSafeInfo.nonce
            })
            await loadPendingTransactions(safeInfo.address)
          }
          break

        case 'view':
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–ø–æ–∑–∞–ª–µ
          console.log('üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–ø–æ–∑–∞–ª–∞:', proposal)
          showSuccess('–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–ø–æ–∑–∞–ª–∞ –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –∫–æ–Ω—Å–æ–ª—å')
          break

        default:
          console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action)
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è ${action}:`, error)
      showError(error instanceof Error ? error.message : `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è ${action}`)
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø–æ–∑–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const refreshUserProposals = () => {
    setUserProposalsRefresh(prev => prev + 1)
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            üß© Safe Multisig Manager
          </h1>
          <p className="text-gray-600">
            –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Safe –º—É–ª—å—Ç–∏—Å–∏–≥ –∫–æ—à–µ–ª—å–∫–æ–º
          </p>
        </div>

        {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
        {error && (
          <div className="mb-6 p-4 bg-red-100 border border-red-200 text-red-700 rounded-lg">
            {error}
          </div>
        )}
        
        {success && (
          <div className="mb-6 p-4 bg-green-100 border border-green-200 text-green-700 rounded-lg">
            {success}
          </div>
        )}

        {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
        <div className="mb-8 p-6 bg-white rounded-lg shadow">
          <h2 className="text-xl font-semibold mb-4">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ</h2>
          
          {!signer ? (
            <div className="space-y-4">
              <button
                onClick={handleConnectWallet}
                disabled={isConnecting}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {isConnecting ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...' : '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫'}
              </button>
              
              <div className="mt-4 p-4 bg-gray-50 rounded-lg">
                <h3 className="text-sm font-medium text-gray-700 mb-2">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏:</h3>
                <div className="flex flex-wrap gap-2">
                  {getSupportedNetworks().map((network) => (
                    <div
                      key={network.chainId}
                      className="inline-flex items-center px-2 py-1 rounded text-xs font-medium"
                      style={{ 
                        backgroundColor: NETWORK_COLORS[network.chainId] + '20',
                        color: NETWORK_COLORS[network.chainId] 
                      }}
                    >
                      {network.name}
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ):(
            <div className="space-y-4">
              <p>–ü–æ–¥–∫–ª—é—á–µ–Ω –∫–æ—à–µ–ª–µ–∫: {formatAddress(userAddress)}</p>
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe */}
        {safeInfo && (
          <div className="mb-8 p-6 bg-white rounded-lg shadow">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Safe</h2>
              <div className="flex gap-2">
                <button
                  onClick={() => setShowUserProposals(!showUserProposals)}
                  className={`px-4 py-2 rounded-lg transition-colors text-sm ${
                    showUserProposals 
                      ? 'bg-green-100 text-green-700 hover:bg-green-200' 
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {showUserProposals ? 'üëÅÔ∏è –°–∫—Ä—ã—Ç—å –ø—Ä–æ–ø–æ–∑–∞–ª—ã' : 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–ø–æ–∑–∞–ª—ã'}
                </button>
                <button
                  onClick={() => setShowSafeManagement(true)}
                  className="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm"
                >
                  üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                </button>
                <button
                  onClick={handleDisconnectFromSafe}
                  className="px-4 py-2 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors text-sm"
                >
                  üîå –û—Ç–∫–ª—é—á–∏—Ç—å—Å—è
                </button>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <p><strong>–ê–¥—Ä–µ—Å:</strong> {formatAddress(safeInfo.address)}</p>
                <p><strong>–ü–æ—Ä–æ–≥:</strong> {safeInfo.threshold} –∏–∑ {safeInfo.owners.length}</p>
              </div>
              <div>
                <p><strong>–ë–∞–ª–∞–Ω—Å:</strong> {safeInfo.balance} ETH</p>
                <p><strong>Nonce:</strong> {safeInfo.nonce}</p>
              </div>
            </div>
            
            <div className="mt-4">
              <strong>–í–ª–∞–¥–µ–ª—å—Ü—ã:</strong>
              <ul className="mt-2 space-y-1">
                {safeInfo.owners.map((owner, index) => (
                  <li key={index} className="text-sm font-mono">
                    {formatAddress(owner)}
                    {owner.toLowerCase() === userAddress.toLowerCase() && (
                      <span className="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                        –í—ã
                      </span>
                    )}
                  </li>
                ))}
              </ul>
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞ –∏–º–ø–æ—Ä—Ç–∞ */}
            <div className="mt-6 pt-4 border-t border-gray-200">
              <h3 className="text-lg font-medium mb-3">üöÄ –î–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏:</h3>
              <div className="flex flex-wrap gap-3">
                {!showImportMode ? (
                  <button
                    onClick={startImportMode}
                    className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 font-medium"
                  >
                    üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏
                  </button>
                ) : (
                  <button
                    onClick={stopImportMode}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-medium"
                  >
                    ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∏–º–ø–æ—Ä—Ç
                  </button>
                )}
                <p className="text-sm text-gray-600 flex items-center">
                  {showImportMode 
                    ? 'üîÑ –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–µ–Ω' 
                    : '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Ö–µ—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'
                  }
                </p>
              </div>
            </div>
          </div>
        )}

        {/* –†–µ–∂–∏–º –∏–º–ø–æ—Ä—Ç–∞ –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π */}
        {showImportMode && safeInfo && (
          <div className="mb-8 p-6 bg-purple-50 border-2 border-purple-200 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">üì• –ò–º–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
            <p className="text-gray-700 mb-6">
              –£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞, –∑–∞—Ç–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.
            </p>

            {/* –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏ */}
            <div className="mb-6">
              <h3 className="font-semibold text-gray-900 mb-3">üéØ –î–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏:</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:
                  </label>
                  <input
                    type="text"
                    value={externalTransactionForm.contractAddress}
                    onChange={(e) => setExternalTransactionForm(prev => ({ ...prev, contractAddress: e.target.value }))}
                    placeholder="0x1234567890123456789012345678901234567890"
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ETH Value:
                  </label>
                  <input
                    type="text"
                    value={externalTransactionForm.ethValue}
                    onChange={(e) => setExternalTransactionForm(prev => ({ ...prev, ethValue: e.target.value }))}
                    placeholder="0"
                    className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                  />
                </div>
              </div>

              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏:
                </label>
                <input
                  type="text"
                  value={externalTransactionForm.functionSignature}
                  onChange={(e) => setExternalTransactionForm(prev => ({ ...prev, functionSignature: e.target.value }))}
                  placeholder="transfer(address,uint256)"
                  className="w-full p-2 border border-gray-300 rounded-lg text-sm font-mono"
                />
                <p className="text-xs text-gray-500 mt-1">
                  –§–æ—Ä–º–∞—Ç: functionName(type1,type2,...)
                </p>
              </div>

              <div className="mb-4">
                <div className="flex items-center justify-between mb-2">
                  <label className="block text-sm font-medium text-gray-700">
                    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏:
                  </label>
                  <button
                    onClick={addExternalFunctionParam}
                    type="button"
                    className="px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
                  >
                    + –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
                  </button>
                </div>
                
                {externalTransactionForm.functionParams.map((param, index) => (
                  <div key={index} className="flex items-center gap-2 mb-2">
                    <input
                      type="text"
                      value={param}
                      onChange={(e) => updateExternalFunctionParam(index, e.target.value)}
                      placeholder={`–ü–∞—Ä–∞–º–µ—Ç—Ä ${index + 1}`}
                      className="flex-1 p-2 border border-gray-300 rounded-lg text-sm"
                    />
                    {externalTransactionForm.functionParams.length > 1 && (
                      <button
                        onClick={() => removeExternalFunctionParam(index)}
                        type="button"
                        className="px-2 py-1 bg-red-500 text-white text-xs rounded hover:bg-red-600"
                      >
                        ‚ùå
                      </button>
                    )}
                  </div>
                ))}
                <p className="text-xs text-gray-500 mt-1">
                  –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏
                </p>
              </div>
            </div>

            {/* –§–æ—Ä–º–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–µ–π */}
            <div className="mb-6">
              <h3 className="font-semibold text-gray-900 mb-3">üìù –ò–º–ø–æ—Ä—Ç –ø–æ–¥–ø–∏—Å–µ–π:</h3>
              <div className="p-4 bg-white border border-gray-200 rounded-lg">
                <div className="grid grid-cols-1 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ê–¥—Ä–µ—Å –ø–æ–¥–ø–∏—Å–∞–Ω—Ç–∞:
                    </label>
                    <input
                      type="text"
                      value={importSignatureForm.signerAddress}
                      onChange={(e) => setImportSignatureForm(prev => ({ ...prev, signerAddress: e.target.value }))}
                      placeholder="0x1234567890123456789012345678901234567890"
                      className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">
                      –ü–æ–¥–ø–∏—Å—å:
                    </label>
                    <textarea
                      value={importSignatureForm.signature}
                      onChange={(e) => setImportSignatureForm(prev => ({ ...prev, signature: e.target.value }))}
                      placeholder="0x1234567890abcdef... (132 —Å–∏–º–≤–æ–ª–∞)"
                      rows={2}
                      className="w-full p-2 border border-gray-300 rounded-lg text-sm font-mono"
                    />
                  </div>
                  
                  <div className="flex items-center gap-3">
                    <button
                      onClick={importExternalSignature}
                      disabled={!importSignatureForm.signerAddress || !importSignatureForm.signature}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 font-medium"
                    >
                      üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å
                    </button>
                    <button
                      onClick={resetImportForm}
                      className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300"
                    >
                      üîÑ –û—á–∏—Å—Ç–∏—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π */}
            <div className="mb-6">
              <h3 className="font-semibold text-gray-900 mb-3">
                üìã –°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ ({collectedSignatures.length} –∏–∑ {safeInfo.threshold}):
              </h3>
              
              {collectedSignatures.length === 0 ? (
                <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <p className="text-yellow-800 text-sm">
                    üîç –ü–æ–¥–ø–∏—Å–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –ø–æ–¥–ø–∏—Å–µ–π.
                  </p>
                </div>
              ) : (
                <div className="space-y-3">
                  {collectedSignatures.map((sig, index) => (
                    <div key={sig.signer} className="p-3 bg-green-50 border border-green-200 rounded-lg">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <div className="font-medium text-green-900 text-sm mb-1">
                            üë§ –ü–æ–¥–ø–∏—Å–∞–Ω—Ç #{index + 1}: {sig.signer}
                          </div>
                          <div className="font-mono text-xs text-green-700 break-all">
                            üîê {sig.signature.slice(0, 20)}...{sig.signature.slice(-10)}
                          </div>
                        </div>
                        <button
                          onClick={() => removeSignatureFromCollection(sig.signer)}
                          className="ml-3 px-2 py-1 bg-red-100 text-red-700 rounded hover:bg-red-200 transition-colors text-xs"
                          title="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—å"
                        >
                          ‚ùå
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
            <div className="mb-6">
              <button
                onClick={executeExternalTransaction}
                               disabled={
                 loading.executeExternalTransaction || 
                 collectedSignatures.length < safeInfo.threshold ||
                 !externalTransactionForm.contractAddress ||
                 !externalTransactionForm.functionSignature
               }
                className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 font-medium"
              >
                {loading.executeExternalTransaction ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : 'üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å—è–º–∏'}
              </button>
              
              {collectedSignatures.length < safeInfo.threshold && (
                <p className="mt-2 text-sm text-gray-500">
                  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π: {collectedSignatures.length} –∏–∑ {safeInfo.threshold} —Ç—Ä–µ–±—É–µ–º—ã—Ö
                </p>
              )}
              
              {(!externalTransactionForm.contractAddress || !externalTransactionForm.functionSignature) && (
                <p className="mt-2 text-sm text-gray-500">
                  –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∏ —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏
                </p>
              )}
            </div>

            {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è */}
            {executionResult && (
              <div className="p-4 bg-green-50 rounded-lg">
                <h3 className="font-semibold text-green-900 mb-4">üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</h3>
                
                <div className="space-y-3">
                  <div>
                    <label className="font-medium text-gray-700 mb-2 block">
                      üîó –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:
                    </label>
                    <div className="flex items-center gap-2">
                      <div className="flex-1 p-3 bg-white border rounded-lg font-mono text-sm break-all">
                        {executionResult.hash}
                      </div>
                      <button
                        onClick={() => copyToClipboard(executionResult.hash, '–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}
                        className="px-3 py-3 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors"
                        title="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à"
                      >
                        üìã
                      </button>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <span className="font-medium text-gray-700">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥–ø–∏—Å–µ–π:</span>
                      <span className="ml-2 text-green-600">{executionResult.signaturesUsed}</span>
                    </div>
                    <div>
                      <span className="font-medium text-gray-700">–¢—Ä–µ–±—É–µ—Ç—Å—è threshold:</span>
                      <span className="ml-2 text-green-600">{executionResult.threshold}</span>
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        )}

        {/* –ü—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        {signer && safeInfo && showUserProposals && (
          <div className="mb-8">
            <UserProposals
              userAddress={userAddress}
              onProposalAction={handleUserProposalAction}
              refreshTrigger={userProposalsRefresh}
              className=""
            />
          </div>
        )}

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Safe */}
        {signer && showSafeManagement && (
          <SafeManagement
            onConnect={handleConnectToSafeWithForm}
            onCreate={handleCreateSafeWithForm}
            onPredict={handlePredictSafeAddress}
            loading={loading.createSafe || loading.connectSafe}
            predicting={loading.predictAddress}
            predictedAddress={predictedSafeAddress}
            userAddress={userAddress}
            className="mb-8"
          />
        )}

        {/* –ë—ã—Å—Ç—Ä–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Safe */}
        {signer && !safeInfo && lastCreatedSafeAddress && showSafeManagement && (
          <div className="mb-8 p-4 bg-green-50 border border-green-200 rounded-lg">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="font-medium text-green-900 mb-1">üöÄ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É Safe</h3>
                <p className="text-sm text-green-800">
                  –ê–¥—Ä–µ—Å: <code className="bg-white px-2 py-1 rounded text-xs">{formatAddress(lastCreatedSafeAddress)}</code>
                </p>
              </div>
              <button
                onClick={() => {
                  // –ú—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å handleConnectToSafe(—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥) –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                  showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –ø–æ—Ä–æ–≥–∞')
                }}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 text-sm"
              >
                üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
              </button>
            </div>
            <p className="mt-2 text-xs text-green-700">
              ‚ÑπÔ∏è –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –ø–æ—Ä–æ–≥ –≤ —Ñ–æ—Ä–º–µ –≤—ã—à–µ
            </p>
          </div>
        )}

        {signer && safeInfo && (
          <div className="space-y-8">
            {/* –®–∞–≥–∏ 2-4: –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ Safe –ø–æ–¥–∫–ª—é—á–µ–Ω */}

            {/* –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
                <div className="p-6 bg-white rounded-lg shadow">
                  <h2 className="text-xl font-semibold mb-4">üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–π</h2>
                  <p className="text-gray-600 mb-6">
                    –°–æ–∑–¥–∞–π—Ç–µ —Ö–µ—à –¥–ª—è –ª—é–±–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, —Å–∏–≥–Ω–∞—Ç—É—Ä—É —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
                  </p>
                  
                  {/* –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ */}
                  <div className="space-y-6 mb-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                          –ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ *
                      </label>
                      <input
                        type="text"
                          value={universalForm.contractAddress}
                          onChange={(e) => setUniversalForm(prev => ({ ...prev, contractAddress: e.target.value }))}
                        placeholder="0x..."
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                          ETH Value (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                      </label>
                      <input
                          type="text"
                          value={universalForm.ethValue}
                          onChange={(e) => setUniversalForm(prev => ({ ...prev, ethValue: e.target.value }))}
                          placeholder="0"
                          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                      />
                    </div>
                    </div>
                    
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ *
                        <span className="text-xs text-gray-500 ml-2">
                          (–Ω–∞–ø—Ä–∏–º–µ—Ä: mint(address,uint256) –∏–ª–∏ transfer(address,uint256))
                        </span>
                      </label>
                      <input
                      type="text"
                        value={universalForm.functionSignature}
                        onChange={(e) => setUniversalForm(prev => ({ ...prev, functionSignature: e.target.value }))}
                        placeholder="functionName(type1,type2)"
                        className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                      />
                    </div>

                    <div>
                      <div className="flex justify-between items-center mb-3">
                        <label className="block text-sm font-medium text-gray-700">
                          –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏
                          <span className="text-xs text-gray-500 ml-2">
                            (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ)
                          </span>
                        </label>
                  <button
                          type="button"
                          onClick={addFunctionParam}
                          className="text-sm bg-purple-100 text-purple-700 px-3 py-1 rounded-lg hover:bg-purple-200 transition-colors"
                        >
                          + –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
                  </button>
                  </div>

                      <div className="space-y-3">
                        {universalForm.functionParams.map((param, index) => (
                          <div key={index} className="flex gap-3 items-center">
                            <div className="flex-1">
                              <input
                                type="text"
                                value={param}
                                onChange={(e) => updateFunctionParam(index, e.target.value)}
                                placeholder={`–ü–∞—Ä–∞–º–µ—Ç—Ä ${index + 1} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0x123... –∏–ª–∏ 100)`}
                                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                              />
                            </div>
                            {universalForm.functionParams.length > 1 && (
                              <button
                                type="button"
                                onClick={() => removeFunctionParam(index)}
                                className="px-3 py-3 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition-colors"
                                title="–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä"
                              >
                                √ó
                              </button>
                            )}
                          </div>
                        ))}
                      </div>

                      <div className="mt-3 p-3 bg-gray-50 rounded-lg text-sm text-gray-600">
                        <p className="font-medium mb-2">–ü—Ä–∏–º–µ—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:</p>
                        <ul className="space-y-1 text-xs">
                          <li><strong>address:</strong> 0x1234567890123456789012345678901234567890</li>
                          <li><strong>uint256:</strong> 1000 (–∏–ª–∏ 100.5 –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ —Å decimals)</li>
                          <li><strong>string:</strong> Hello World</li>
                          <li><strong>bool:</strong> true –∏–ª–∏ false</li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                  <div className="flex gap-4">
                    <button
                      onClick={handleCreateUniversalHash}
                      disabled={loading.universalHash || !safeInfo}
                      className="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50"
                    >
                      {loading.universalHash ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : 'üéØ –°–æ–∑–¥–∞—Ç—å —Ö–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'}
                    </button>
                    
                    <button
                      onClick={resetUniversalForm}
                      className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                    >
                      –°–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É
                    </button>
                  </div>

                  {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
                  {universalResult && (
                    <div className="mt-6 p-4 bg-green-50 rounded-lg">
                      <h3 className="font-semibold text-green-900 mb-4">‚úÖ –•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω!</h3>
                      
                      <div className="space-y-3 text-sm">
                        <div>
                          <label className="font-medium text-gray-700">–•–µ—à –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:</label>
                          <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                            {universalResult.transactionHash}
                          </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                          <div>
                            <label className="font-medium text-gray-700">–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs">
                              {formatAddress(universalResult.transactionDetails.to)}
                            </div>
                          </div>
                          
                          <div>
                            <label className="font-medium text-gray-700">ETH Value:</label>
                            <div className="mt-1 p-2 bg-white border rounded">
                              {universalResult.transactionDetails.value} ETH
                            </div>
                          </div>
                          
                          <div>
                            <label className="font-medium text-gray-700">Nonce:</label>
                            <div className="mt-1 p-2 bg-white border rounded">
                              {universalResult.transactionDetails.nonce}
                            </div>
                          </div>
                        </div>

                        <div>
                          <label className="font-medium text-gray-700">Encoded Data:</label>
                          <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                            {universalResult.encodedData}
                          </div>
                        </div>

                        {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è */}
                        <div className="mt-4 flex flex-wrap gap-3">
                          <button
                            onClick={handleSignTransactionHash}
                            disabled={loading.signHash || signatureResult !== null}
                            className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 font-medium"
                          >
                            {loading.signHash ? '–ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ...' : 'üñãÔ∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (EIP-712)'}
                          </button>
                          
                          <button
                            onClick={() => copyToClipboard(universalResult.transactionHash, '–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')}
                            className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                          >
                            üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ö–µ—à
                          </button>
                        </div>

                        <div className="mt-4 p-3 bg-blue-50 border-l-4 border-blue-400">
                          <p className="text-blue-800 text-sm">
                            üí° <strong>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</strong> –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ –≤–∞—à –∫–æ—à–µ–ª–µ–∫, –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ö–µ—à –¥–ª—è —Ä—É—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}

                  {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–ø–∏—Å–∏ */}
                  {signatureResult && (
                    <div className="mt-6 p-4 bg-purple-50 rounded-lg">
                      <h3 className="font-semibold text-purple-900 mb-4">üñãÔ∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞!</h3>
                      
                      <div className="space-y-3 text-sm">
                        <div>
                          <label className="font-medium text-gray-700">–ü–æ–¥–ø–∏—Å—å (EIP-712):</label>
                          <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                            {signatureResult.signature}
                          </div>
                          <div className="mt-2 flex gap-2">
                            <button
                              onClick={() => copyToClipboard(signatureResult.signature, '–ü–æ–¥–ø–∏—Å—å')}
                              className="px-3 py-1 bg-purple-100 text-purple-700 rounded text-xs hover:bg-purple-200"
                            >
                              üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—å
                            </button>
                          </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                          <div>
                            <label className="font-medium text-gray-700">R:</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                              {signatureResult.r}
                            </div>
                          </div>
                          <div>
                            <label className="font-medium text-gray-700">S:</label>
                            <div className="mt-1 p-2 bg-white border rounded font-mono text-xs break-all">
                              {signatureResult.s}
                            </div>
                          </div>
                          <div>
                            <label className="font-medium text-gray-700">V:</label>
                            <div className="mt-1 p-2 bg-white border rounded">
                              {signatureResult.v}
                            </div>
                          </div>
                        </div>

                        <div className="mt-4 p-3 bg-green-50 border-l-4 border-green-400">
                          <p className="text-green-800 text-sm">
                            ‚úÖ <strong>–£—Å–ø–µ—à–Ω–æ!</strong> –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ STS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–ø–æ–∑–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
                          </p>
                        </div>
                      </div>
                    </div>
                  )}
                </div>

                {/* –®–∞–≥–∏ 4-5: –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π */}
                <div className="p-6 bg-white rounded-lg shadow">
                  <h2 className="text-xl font-semibold mb-4">4. –û–∂–∏–¥–∞—é—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</h2>
                  
                  {pendingTransactions.length === 0 ? (
                    <p className="text-gray-500">–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</p>
                  ) : (
                    <div className="space-y-4">
                      {pendingTransactions.map((tx) => {
                        const approvalInfo = approvedHashInfos.get(tx.safeTxHash)
                        
                        return (
                          <div key={tx.safeTxHash} className="p-4 border border-gray-200 rounded-lg">
                            {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ */}
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                              <div>
                                <p><strong>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</strong> {formatAddress(tx.to)}</p>
                                <p><strong>–°—É–º–º–∞:</strong> {tx.value} ETH</p>
                              </div>
                              <div>
                                <p><strong>Nonce:</strong> {tx.nonce}</p>
                              </div>
                            </div>
                            
                            {/* Approved Hash –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                            {approvalInfo && (
                              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                <div className="flex items-center justify-between mb-2">
                                  <h4 className="font-semibold text-blue-900">üìù Approved Hash Status</h4>
                                  <button
                                    onClick={() => updateApprovedHashInfo(tx.safeTxHash)}
                                    className="text-blue-600 hover:text-blue-800 text-sm"
                                  >
                                    üîÑ
                                  </button>
                                </div>
                                
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-3 text-sm">
                                  <div>
                                    <span className="font-medium text-gray-700">–û–¥–æ–±—Ä–µ–Ω–∏—è:</span>
                                    <span className={`ml-2 font-semibold ${approvalInfo.canExecute ? 'text-green-600' : 'text-orange-600'}`}>
                                      {approvalInfo.approvedCount} / {approvalInfo.threshold}
                                    </span>
                                  </div>
                                  <div>
                                    <span className="font-medium text-gray-700">–°—Ç–∞—Ç—É—Å:</span>
                                    <span className={`ml-2 ${approvalInfo.canExecute ? 'text-green-600' : 'text-orange-600'}`}>
                                      {approvalInfo.canExecute ? '‚úÖ –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é' : '‚è≥ –¢—Ä–µ–±—É—é—Ç—Å—è –æ–¥–æ–±—Ä–µ–Ω–∏—è'}
                                    </span>
                                  </div>
                                  <div>
                                    <span className="font-medium text-gray-700">–í–ª–∞–¥–µ–ª—å—Ü–µ–≤:</span>
                                    <span className="ml-2 text-gray-600">{approvalInfo.totalOwners}</span>
                                  </div>
                                </div>
                                
                                {approvalInfo.approvedOwners.length > 0 && (
                                  <div className="mt-2">
                                    <span className="text-xs font-medium text-gray-700">–û–¥–æ–±—Ä–∏–≤—à–∏–µ:</span>
                                    <div className="flex flex-wrap gap-1 mt-1">
                                      {approvalInfo.approvedOwners.map((owner, index) => (
                                        <span key={index} className="inline-flex items-center px-2 py-1 bg-green-100 text-green-800 text-xs rounded">
                                          üë§ {formatAddress(owner)}
                                          {owner.toLowerCase() === userAddress.toLowerCase() && (
                                            <span className="ml-1 text-green-600">‚óè</span>
                                          )}
                                        </span>
                                      ))}
                                    </div>
                                  </div>
                                )}
                              </div>
                            )}
                            
                            <p className="text-xs font-mono text-gray-500 mb-4">
                              Hash: {tx.safeTxHash}
                            </p>

                            {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                            <div className="flex flex-wrap gap-2">

                              {/* Approved Hash –∫–Ω–æ–ø–∫–∏ */}
                              {!tx.isExecuted && (
                                <>
                                  <button
                                    onClick={() => handleApproveTransactionHash(tx)}
                                    disabled={loading[`approve_${tx.safeTxHash}`]}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                                  >
                                    {loading[`approve_${tx.safeTxHash}`] ? '–û–¥–æ–±—Ä—è–µ–º...' : 'üìù –û–¥–æ–±—Ä–∏—Ç—å —Ö—ç—à'}
                                  </button>
                                  
                                  {approvalInfo && approvalInfo.canExecute && (
                                    <button
                                      onClick={() => handleExecuteWithPreApprovals(tx)}
                                      disabled={loading[`execute_preapproved_${tx.safeTxHash}`]}
                                      className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50"
                                    >
                                      {loading[`execute_preapproved_${tx.safeTxHash}`] ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : 'üèÜ –í—ã–ø–æ–ª–Ω–∏—Ç—å (Approved Hash)'}
                                    </button>
                                  )}

                                  <button
                                    onClick={() => updateApprovedHashInfo(tx.safeTxHash)}
                                    className="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200"
                                  >
                                    üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è
                                  </button>
                                </>
                              )}

                              {tx.isExecuted && (
                                <span className="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg">
                                  ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                                </span>
                              )}
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  )}

                  <div className="mt-6 flex gap-3">
                    <button
                      onClick={() => safeInfo && loadPendingTransactions(safeInfo.address)}
                      className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                    >
                      üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
                    </button>
                    <button
                      onClick={updateAllApprovedHashInfos}
                      disabled={pendingTransactions.length === 0}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
                    >
                      üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è
                    </button>
                  </div>
                  
                  {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å approved hash */}
                  <div className="mt-4 p-3 bg-purple-50 border border-purple-200 rounded-lg">
                    <h3 className="font-medium text-purple-900 mb-2">üí° Approved Hash Workflow</h3>
                    <div className="text-sm text-purple-800 space-y-1">
                      <p><strong>1Ô∏è‚É£ –û–¥–æ–±—Ä–µ–Ω–∏–µ:</strong> –í–ª–∞–¥–µ–ª—å—Ü—ã –Ω–∞–∂–∏–º–∞—é—Ç "üìù –û–¥–æ–±—Ä–∏—Ç—å —Ö—ç—à" –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</p>
                      <p><strong>2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞:</strong> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏—è" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å</p>
                      <p><strong>3Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ:</strong> –ö–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–Ω–æ {safeInfo?.threshold || 'N'} –æ–¥–æ–±—Ä–µ–Ω–∏–π, –ª—é–±–æ–π –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å "üèÜ –í—ã–ø–æ–ª–Ω–∏—Ç—å (Approved Hash)"</p>
                      <p><strong>‚ö° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ:</strong> –ì–∞–∑ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫!</p>
                    </div>
                  </div>
                </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default SafeMultisigApp
