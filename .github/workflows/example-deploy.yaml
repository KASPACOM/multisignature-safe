name: Build and Deploy Nest Application

on:
  push:
    branches: [main, develop]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1
  WPD: /home/runner/work/multisignature-safe/pkg/example

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "/pkg/example"
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set Up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'  # Specify your Node.js version

    # Set up SSH key for accessing GitHub
    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Install Dependencies
      run: npm install

    - name: Build production for main
      if: github.ref == 'refs/heads/main'
      run: npm run build

    - name: Build dev for develop
      if: github.ref == 'refs/heads/develop'
      run: npm run build

    - name: Upload dist artifact
      uses: actions/upload-artifact@v4
      with:
        name: nest-dist
        path: dist  

  build-image-and-push:
    needs: build-nest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: nest-dist
          path: ./dist

      - name: Set environment variables based on branch
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "ECR_REPO_URI=009160070963.dkr.ecr.us-east-1.amazonaws.com/multisig/example-prod" >> $GITHUB_ENV
            echo "AWS_REGION=us-east-1" >> $GITHUB_ENV
            echo "ARGO_PATH=prod/prod-a-ue1-cluster/multisignature-safe/example-deployment.yaml" >> $GITHUB_ENV
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            echo "ECR_REPO_URI=009160070963.dkr.ecr.eu-central-1.amazonaws.com/multisig/example-dev" >> $GITHUB_ENV
            echo "AWS_REGION=eu-central-1" >> $GITHUB_ENV
            echo "ARGO_PATH=dev/dev-a-eu1-cluster/multisignature-safe/example-deployment.yaml" >> $GITHUB_ENV
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          DOCKER_BUILDKIT=1 docker build --ssh default --build-arg DIST_PATH=./dist -t $ECR_REPO_URI:latest .

      - name: Tag Docker image
        run: |
          docker tag $ECR_REPO_URI:latest $ECR_REPO_URI:${{ github.sha }}

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REPO_URI:latest
          docker push $ECR_REPO_URI:${{ github.sha }}

      - name: Generate token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          owner: 'KASPACOM'
          repositories: 'argo-cd'
          app-id: ${{ secrets.ARGO_GH_APP_ID }}
          private-key: ${{ secrets.ARGO_GH_APP_PRIVATE_KEY }}

      - name: Checkout ArgoCD repository
        uses: actions/checkout@v3
        with:
          repository: KASPACOM/argo-cd
          token: ${{ steps.generate-token.outputs.token }}

      - name: Update image tag in ArgoCD repository
        run: |
          sed -i "s|image: .*|image: $ECR_REPO_URI:${{ github.sha }}|" $ARGO_PATH
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add $ARGO_PATH
          git commit -m "Update $DEPLOY_ENV-multisignature-example image to ${{ github.sha }}"
          git push
